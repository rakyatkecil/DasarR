[["index.html", "Dasar-dasar Pemrograman R Chapter 1 Pengantar 1.1 Sejarah Program R 1.2 Program R 1.3 R Studio", " Dasar-dasar Pemrograman R ’dimas 2023-01-30 Chapter 1 Pengantar Capaian Mahasiswa dapat melakukan instalasi dan menjalankan Program R dan R Studio Mahasiswa mengenali ruang kerja Program R Studio Mahasiswa dapat membuat projek baru pada Program R Studio Alat dan kebutuhan Komputer atau laptop dengan Sistem Operasi Windows atau MacOS Koneksi internet 1.1 Sejarah Program R R adalah salah satu bahasa pemrograman yang khusus dibuat untuk melakukan komputasi statsistik. Program R dibuat oleh Ross Ihaka dan Robert Gentleman berdasarkan (sangat mirip) pada bahasa pemrogram S yang perlu mengeluarkan beberapa rupiah untuk dapat menggunakannya. Sedangkan R adalah open source. Figure 1.1: Ross Ihaka dan Robert Gentleman 1.2 Program R R secara resmi diluncurkan pertama kali pada 29 Februari 2000 (R 1.0). Banyak pengguna menganggap R adalah sebuah sistem statistika. Hal ini dikarenakan R sangat terinspirasi dengan Program S yang memang dibuat khusus untuk pemrograman statistik. R memberikan banyak kemudahan bagi pemula yang masih baru memulai belajar pemrograman (terutama dalam hal statistik). Hal ini dikarenakan terdapat berbagai fungsi-fungsi dasar statistik yang sangat mirip dengan nama metode statistikanya, seperti untuk menghitung nilai rata-rata (mean) menggunakan fungsi mean() di R. Selain dapat digunakan dalam berbagai macam teknik statistika (dengan menggunakan paket yang berkaitan tentunya), R dapat digunakan untuk membuat grafik sesuai dengan kebutuhan penggunanya. Salah satu keunggulan R adalah memiliki komunitas yang besar. Siapa saja dapat membuat sebuah paket yang terdiri dari berbagai fungsi. Paket-paket dalam R dikembangkan dari berbagai bidang seperti ahli statistik, programmer, psikolog, dsb. Setiap paket memiliki tujuan masing-masing sesuai dengan kegunaan yang diinginkan oleh pembuatnya. Kenapa harus menggunakan R? Gratis dan open source. Tersedia untuk Windows, Macintosh dan Linux. Kualitas gambar yang bagus. Pengguna dapat menentukan penggunaan metode statistika dengan algoritma tertentu. Ketersediaan berbagai macam paket statistik ( statistical packages ) yang dapat digunakan secara gratis. 1.2.1 Instalasi Program R Untuk menjalankan R, maka langkah pertama yang harus dilakukan adalah melakukan instalasi Program R di komputer/laptop anda. Paket instalasi Program R dapat di unduh pada link berikut: for Windows for Macintosh Setelah paket instalasi berhasil di unduh, selanjutnya klik 2x pada paket tersebut lalu ikuti langkah-langkah sebagai berikut: Pilih bahasa yang akan digunakan. Lalu klik next Figure 1.2: Pilih Bahasa yang Akan Digunakan Baca Lisensi Program. Setelah itu klik next Figure 1.3: Lisensi Program Pilih folder tempat (direktori) R di instal. Lalu klik next Figure 1.4: Pilih Direktori Tempat R Diinstal Pilih komponen yang akan di instal (dapat dipilih semua). Lalu klik next Figure 1.5: Pemilihan Komponen yang akan Diinstal Selanjutnya pemilihan startup. Pilih No, Lalu klik next Figure 1.6: Pemilihan Startup Lalu tunggu hingga proses instalasi selesai. Lalu klik next (jika diperlukan). Figure 1.7: Proses Instalasi Instalasi R telah selesai. Klik finish Figure 1.8: Proses Instalasi telah Selesai Dapat dipastikan kembali bahwa proses instalasi program telah berjalan dengan membuka program. Apabila tidak muncul permasalahan ( error ), maka proses instalasi program telah berhasil. Figure 1.9: Icon Program R pada Layar Desktop 1.3 R Studio R Studio atau RStudio adalah open source integrated development environment IDE untuk R. R harus ter-instal terlebih dahulu sebelum melakukan instalasi RStudio. Tampilan antarmuka RStudio yang terorganisasi dengan baik membuat pengguna dapat melihat dengan jelas kode R, grafik, tabel data, dan output secara bersamaan. Selain itu terdapat fasilitas Import Wizard (panduan import) seperti di program-program lain. R juga dapat mengimgport berbagai macam jenis file data seperti CSV, XLS/XLSX, SAS, SPSS, Stata tanpa harus membuat kode untuk melakukannya. 1.3.1 Instalasi Program R Studio Untuk melakukan instalasi program RStudio, unduh file paket instalasi pada link berikut: for Windows for Macintosh for Ubuntu 18+ / Debian 10+ Setelah paket instalasi berhasil di unduh, selanjutnya klik 2x pada paket tersebut lalu ikuti langkah-langkah sebagai berikut: Klik next pada jendela pertama. Figure 1.10: Jendela Pertama Instalasi RStudio Pilih direktori tempat RStudio di instal. Figure 1.11: Pemilihan Direktori Instalasi RStudio Pilih nama direktori untuk menu di Start Menu Pilih direktori tempat RStudio di instal. Figure 1.12: Pemilihan Direktori di Start Menu Tunggu hingga proses instalasi selesai lalu klik finish. Pilih direktori tempat RStudio di instal Figure 1.13: Proses Instalasi RStudio Lakukan pengecekan kembali untuk memastikan RStudio telah terinstal. Figure 1.14: Pengecekan RStudio di Start Menu 1.3.2 Lingkungan Kerja RStudio Sebelum membahas tentang lingkungan kerja RStudio, siapkan R Script terlebih dahulu. Klik File -&gt; New File -&gt; R Script, atau gunakan tombol Ctrl + Shift + N. Selanjutnya tampilan antarmuka RStudio akan seperti gambar berikut: Figure 1.15: Tampilan Antarmuka RStudio Terdapat 4 jendela dalam RStudio. Masing-masing jendela memiliki kegunaannya masing-masing dan dalam praktikya, hampir semua jendela akan digunakan. Sehingga pemahaman terhadap kegunaan setiap jendela adalah langkah pertama sebelum belajar lebih jauh dalam menggunakan RStudio. Berikut pembagian jendela pada Rstudio: Figure 1.16: Pembagian Jendela Antarmuka RStudio Berikut penjelasan pada masing-masing jendela: R Script Editor R Script Editor adalah tempat kita untuk membuat dan menyusun kode-kode R yang akan dijalankan di Jendela Console. Secara teknis pengerjaan R dilakukan pada Console, namun dalam praktiknya pengguna biasanya tidak hanya menggunakan 1 atau 2 baris kode saja, namun hingga ratusan baris kode. Jika ratusan baris kode di susun dalam Console akan membuat pengguna kesulitan dalam melanjutkan pada baris berikutnya (karena lupa, atau ada yang kode yang salah). Apabila kode-kode tersebut disusun dalam R Script, pengguna dapat dengan bebas mengganti kode-kode yang salah hingga menyusun ulang kode yang dibuat. Tentu hal ini membuat pekerjaan jauh lebih mudah. Console Jendela Console adalah jendela untuk menjalankan kode-kode R (R Script). Setiap kode R hanya dapat dijalankan di Console. Untuk melihat cara kerjanya secara langsung, coba ketikan kode 5 + 5 di R Script lalu tekan Enter. Perhatikan apakah RStudio memberikan hasil dari 5 + 5 tersebut? Tentu tidak akan terjadi apa-apa pada RStudio. Nah, sekarang ketikan 5 + 5 di Console lalu tekan Enter. Perhatikan bahwa dalam Console 5 + 5 akan menghasilkan nilai 10. Hal ini menunjukkan bahwa R Script bukanlah tempat untuk menjalankan kode R, melainkan Console. Untuk menjalakan kode dari R Script ke Console dapat dilakukan dengan meletakkan cursor pada baris yang akan dijalankan pada Console lalu tekan Ctrl + Enter. Environment, History, Connection, Tutorial Jendela ke-3 yang akan sering digunakan adalah Tab Environment. Tab Environment menunjukkan objek-objek yang ada atau telah kita buat (pembuatan objek akan dibahas pada chapter berikutnya). Files, Packages, Plot, Help, Viewer, Presentation Jendela ke-4 yang akan sering digunakan terutama bagi pemula adalah Tab Files, Packages, Plot dan Help. Tab Files menunjukkan file-file yang ada pada direktori kerja kita (akan menyesuaikan dengan proyek yang digunakan). Direktori kerja akan sangat membatu saat kita bekerja dengan beberapa file R Script atau file lainnya (data, gambar, dsb.). Tab Packages adalah jendela yang menunjukkan paket-paket R yang telah ter-instal di RStudio (penjelasan paket akan dibahas pada chapter berikutnya). Apabila paket tersebut telah ter-instal maka kita dapat mengaktifkan paket dengan men-centang pada kotak disebelah kiri paket (dapat diaktifkan juga dengan kode library(nama_paket). Tab Plot ini akan memunculkan grafik-grafik yang telah kita buat (pembuatan grafik akan dibahas pada chapter Membuat Grafik dengan ggplot2). Tab Help akan digunakan apabila kita ingin mngetahui bagaimana syntax (tata cara penggunaan/susunan fungsi) dari suatu fungsi. Selain itu jendela ini juga dapat digunakan untuk melihat fungsi-fungsi apa saja ya tersedia dalam sebuah paket. Save Workspace berguna untuk menyimpan environment dan history yang telah ada saat itu, sehingga environment dan history akan tetap seperti yang sebelumnya saat membuka kembali proyek tersebut. Workspace biasanya disimpan saat kita bekerja dengan banyak fungsi dan objek yang akan digunakan kembali saat proyek dibuka. Namun biasanya dalam perkuliahan topik selanjutnya akan menggunakan data yang berbeda, sehingga menyimpan workspace tidak disarankan agar tidak membuat kebingungan. 1.3.3 Membuat Projek Baru RStudio memberikan kita kemudahan dalam membagi pekerjaan dengan menggunakan konsep Proyek. Setiap proyek memiliki lingkungan kerjanya masing-masing. Hal ini merupakan salah satu hal yang membuat RStudio sangat digemari bahkan dikalangan programmer. Membuat sebuah proyek baru dapat dilakukan dengan cara sebagai berikut: Klik Tombol Project (None) pada posisi kanan atas. Stelah itu akan muncul jendela sebagai berikut. Klik New Directory jika belum menyiapkan direktori kerja utama untuk menyimpan proyek, atau klik Existing Directory jika sudah memiliki direktori kerja utama yang telah ditentukan Figure 1.17: Membuat Proyek Baru Selanjutnya dapat disesuaikan. Pilih New Project jika yang akan dikerjakan ini masih baru (belum masuk dalam proyek manapun). Figure 1.18: Proses Pembuatan Proyek Baru (step 2) Selanjutnya tentukan nama sub direktori kerja jika sub direktori kerja yang diinginkan tidak ada. Lalu klik Create Project. Jika sebelumnya telah memiliki sub direktori kerja, klik Browse... untuk memilih direktori secara manual. Figure 1.19: Proses Pembuatan Proyek Baru (step 3) Setelah itu maka tampilan RStudio akan kembali seperti semula. (Perhatikan pada bagian kanan atas, nama proyek sudah menyesuaikan dengan nama yang kita buat sebelumnya. Bukan lagi dengan nama Project (None)) Figure 1.20: Proses Pembuatan Proyek Baru (step 4) "],["pertemuan-1-pengenalan.html", "Chapter 2 Pertemuan 1: Pengenalan 2.1 Objek 2.2 Paket (Packages) 2.3 Tipe Data 2.4 Struktur Data 2.5 Operator - operator pada R", " Chapter 2 Pertemuan 1: Pengenalan Capaian Mahasiswa mengenal dan dapat membuat sebuah objek pada Program R Mahasiswa mengenal dan dapat melakukan instalasi paket pada Program R Mahasiswa mengetahui tipe-tipe data pada Program R Mahasiswa mengetahui struktur data pada Program R Mahasiswa mengetahui berbagai jenis operator data pada Program R Alat dan kebutuhan Aplikasi R Studio Koneksi internet 2.1 Objek Objek merupakan sebuah wadah untuk menyimpan informasi (dapat berupa nilai, data, ataupun lainnya) yang telah didefinisikan. Penyimpanan informasi ke dalam sebuah objek memberikan kemudahan bagi pengguna R untuk memanggil informasi yang sama berulang kali hanya dengan memanggil nama objeknya saja. Seringkali sebuah informasi memiliki banyak bagian didalamnya seperti data frame atau kerangka data (memiliki kolom-kolom variabel). Informasi ini akan sangat merepotkan jika harus memanggilnya berulang kali, sehingga dengan mendefinisikannya ke dalam sebuah objek akan mempercepat proses pengerjaannya. Terdapat beberapa cara dalam mendefinisikan objek pada R seperti yang tersajikan pada tabel berikut: Table 2.1: Operator Pendefinisian Objek pada R Operator Operasi &lt;-, = Mendefinisikan objek sebelah kiri -&gt; Mendefinisikan objek sebelah kanan Contoh penggunaannya adalah sebagai berikut: a &lt;- 4 b &lt;- c(1, 4, 6, 8, 5) c = c(&quot;Indonesia&quot;, &quot;Raya&quot;) d = data.frame(X = c(1, 2, 3, 4, 5), Y = c(&quot;Rondi&quot;, &quot;Anis&quot;, &quot;Alya&quot;, &quot;Budi&quot;, &quot;Surya&quot;)) Setelah objek didefinisikan, selanjutnya pemanggilan objek dapat dilakukan dengan menggunakan nama obejeknya saja. Contoh, akan kita panggil ketiga objek yang telah didefinisikan sebelumnya yaitu a, b, c, d dengan mengetikan masing-masing objek tersebut secara bergantian di Console. Berikut hasilnya: a ## [1] 4 b ## [1] 1 4 6 8 5 c ## [1] &quot;Indonesia&quot; &quot;Raya&quot; d ## X Y ## 1 1 Rondi ## 2 2 Anis ## 3 3 Alya ## 4 4 Budi ## 5 5 Surya Objek-objek tersebut telah terdefinisikan di RStudio. Perhatikan pada Jendela Environment saat ini sudah ada 4 buah objek yang didefinisikan sebelumnya. Figure 2.1: Jendela Environment yang Sudah Terdapat Objek Objek-objek tersebut dapat dihapu ataupun digantikan dengan nilai yang baru. Untuk menghapus sebuah objek dapat dilakukan dengan menggunakan fungsi rm(nama_objek). Contoh: a = 79 rm(b) Sekarang objek a telah memiliki nilai baru yaitu 79 dan objek b tidak tersedia pada Jendela Environment. Figure 2.2: Jendela Environment setelah Penggantian Objek a dan Penghapusan Objek b Terdapat beberapa syarat pembuatan nama objek yaitu: Tidak ada penggunaan simbol apapun kecuali . (titik) dan _ Tidak diawali dengan angka dan simbol apapun Tidak menggunakan spasi Jangan menggunakan nama objek yang sama dengan nama sebuah fungsi Penamaan objek adalah Case Sensitive 2.2 Paket (Packages) R Packages adalah unit yang sangat fundamental dalam Program R. Dalam sebuah R Packages berisi kode-kode yang dapat digunakan, sampel data dan dokumentasi yang telah dideskripsikan dengan baik untuk mempermudah penggunaannya. Terdapat berbagai macam paket yang tersedia di software repository CRAN ( The Comprehensive R Archive Network ) yang merupakan pusat arsip dari versi-versi paket terbaru dan yang lama (biasanya paket diperbarui oleh pembuatnya untuk keperluan kemudahan penggunanya atau menyesuaikan dengan update terbaru dari R). Tercatat bahwa pada November 2020 sudah terdapat lebih dari 16.000 paket yang tersedia di CRAN. Sebagai contoh penggunaan paket, akan dilakukan pembuatan grafik dengan menggunakan fungsi plot() yang merupakan fungsi bawaan dari R (dari paket base) dibandingkan dengan grafik yang menggunakan paket ggplot2. Berikut Hasilnya: Figure 2.3: Diagram Pencar Dengan dan Tanpa Menggunakan Paket Untuk melakukan instalasi paket, pertama siapkan jaringan internet yang baik. Paket akan di unduh dari repository CRAN. Setelah jaringan internet stabil, gunakan fungsi install.packages(\"nama_paket\") lalu jalankan pada Console. Pastikan jaringan internet stabil selama proses instalasi paket berlangsung. Biasanya paket-paket dalam R tidak dapat berdiri sendiri atau memerlukan paket lain yang juga harus terinstal. Apabila terdapat 1 paket lain yang diperlukan namun gagal terinstal, maka paket yang akan kita gunakan tidak akan berjalan. Saat ini terjadi biasanya nama paket tidak akan muncul di Tab Packages (beberapa kasus nama paket muncul namun tidak dapat menggunakan fungsi yang ada). Apabila paket tidak berfungsi dengan baik, maka lakukan instalasi ulang pada paket tersebut. Figure 2.4: Contoh Paket ggplot2 yang Sudah Terinstal dan Dapat Digunakan Secara default CRAN menjadi repository untuk mengunduh paket di RStudio. Sehingga kita tidak perlu mengatur repository lagi. Berikut adalah beberapa daftar paket yang harus sudah terinstal (dan dapat digunakan) untuk topik Program R. tidyverse Digunakan untuk melakukan manajemen pada data. Cara instal paket dengan menjalankan fungsi install.packages(\"tidyverse\") pada console ggplot2 Digunakan untuk membuat grafik yang lebih bagus. Cara instal paket dengan menjalankan fungsi install.packages(\"ggplot2\") pada console dgof Digunakan untuk melakukan uji normalitas menggunakan Metode Kolmogorov-Smirnov. Cara instal paket dengan menjalankan fungsi install.packages(\"dgof\") pada console readr Digunakan untuk import data dengan Import Wizard 2.3 Tipe Data Terdapat 6 tipe data pada bahasa pemrograman R. Setiap tipe data tersebut memiliki karakteristik sendiri sehingga tidak terjadi tumpang tindih dalam melakukan berbagai macam pengoperasiannya. Berikut adalah 6 tipe data pada bahasa pemrograman R: 2.3.1 Numerik (Numeric) Tipe data numerik adalah tipe data yang berupa nilai/angka desimal. Tipe data ini merupakan tipe data yang dapat digunakan untuk melakukan operasi-operasi aritmatika seperti penjumlahan, pengurangan, perkailan, dsb. Jika kita definisikan objek x dengan suatu nilai/angka, maka tipe objek tersbut adalah numeric. x &lt;- 2.6 class(x) ## [1] &quot;numeric&quot; Bahkan R akan mendefinisikan objek dengan tipe numeric jika berikan angka tanpa desimal. x &lt;- 5 class(x) ## [1] &quot;numeric&quot; 2.3.2 Bilangan Bulat (Integer) Seperti yang kita tahu bahwa pendefinisian angka pada suatu objek akan secara otomatis membuat objek tersebut bertipe numeric. Sedangkan untuk mendefinisikan objek dengan tipe integer harus mendefinisikan secara khusus objek tersebut dengan perintah as.integer. x &lt;- as.integer(5) class(x) ## [1] &quot;integer&quot; Selain itu kita dapat mendefinisikan sebuah objek yang bertipe integer dengan menambahkan huruf L kapital pada akhir angka. x &lt;- 3L class(x) ## [1] &quot;integer&quot; Bagaimana jika kita berikan angka desimal pada objek yang kita definisikan sebagai integer? x &lt;- as.integer(3.76) 2.3.3 Bilangan Kompleks (Complex) Bilangan kompleks dalam matematika adalah bilangan yang didefinisikan dengan \\(a + bi\\), dengan \\(a\\) dan \\(b\\) adalah bilangan real. Sedangkan \\(i\\) adalah bilangan imajiner dan menyebabkan \\(bi\\) menjadi imajiner. Bilangan imajiner sendiri memiliki sifat \\(i^{2}=1\\). Kita harus secara langsung mendefinisikan objek sebagai bilangan kompleks agar mendapatkan sebuah objek yang bertipe complex. x &lt;- 2 + 4i class(x) ## [1] &quot;complex&quot; 2.3.4 Logika (Logical) Objek dengan tipe logika adalah objek yang hanya memiliki 2 nilai saja yaitu TRUE dan FALSE. x &lt;- TRUE class(x) ## [1] &quot;logical&quot; 2.3.5 Teks (Character) Pendefinisian objek dengan tipe teks (character) merupakan hal yang cukup mudah. Kita perlu menambahkan tanda petik \" pada awal dan akhir teks. Setelah itu objek akan terdefinisikan sebagai character. x &lt;- &quot;Aplikasi Komputer&quot; class(x) ## [1] &quot;character&quot; x ## [1] &quot;Aplikasi Komputer&quot; Apakah tipe data dari objek yang didefinisikan dengan nilai \"2.4\"? 2.3.6 Faktor (Factor) Faktor adalah tipe data pada bahasa pemrograman R yang digunakan untuk mendefinisikan sebuah objek menjadi sebuah objek dengan tipe data kategorik. Perintah yang digunakan untuk merubah sebuah objek menjadi sebuah faktor adalah factor(). x &lt;- factor(c(1, 2, 3)) y &lt;- factor(c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;SMA&quot;, &quot;PT&quot;)) x ## [1] 1 2 3 ## Levels: 1 2 3 y ## [1] SD SMP SMA SMA PT ## Levels: PT SD SMA SMP Sebuah objek yang telah didefinisikan sebagaik faktor akan memiliki levels yang merupakan daftar kategori yang terdapat pada objek tersebut. Kita dapat menggunakan perintah levels untuk dapat memunculkan levels nya saja. levels(x) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; levels(y) ## [1] &quot;PT&quot; &quot;SD&quot; &quot;SMA&quot; &quot;SMP&quot; Apa perbedaan output dari objek yang bertipe factor dengan objek yang bertipe numeric? Apa perbedaan output dari objek yang bertipe factor dengan objek yang bertipe character? 2.4 Struktur Data Struktur data pada bahasa pemrograman R adalah sebuah konsep yang digunakan untuk menyimpan data berdasarkan kebutuhannya. Berdasarkan struktur datanya, terdapat 4 struktur data yang dapat kita definisikan pada program R: Vektor (vector) Matriks (matrix) Pendafaran (list) Kerangka Data (data.frame) 2.4.1 Vektor (Vector) Vektor adalah struktur data yang paling sederhana pada bahasa pemrograman R. Vektor memuat barisan data dengan tipe data yang sama. Pendefinisian vektor dilakukan dengan menggunakan perintah c(). Semua data ditulis didalam tanda kurung dan setiap data dipisahkan dengan tanda koma ,. x &lt;- c(1:5) x ## [1] 1 2 3 4 5 y &lt;- c(&quot;Hipertensi&quot;, &quot;Diabetes&quot;, &quot;Asam Urat&quot;) y ## [1] &quot;Hipertensi&quot; &quot;Diabetes&quot; &quot;Asam Urat&quot; length(x) ## [1] 5 length(y) ## [1] 3 Apa yang terjadi apabila sebuah vektor diisi dengan 2 tipe data? misalnya c(12, 4, TRUE) Selanjutnya kita dapat memanggil anggota dari sebuah objek vector dengan menggunakan tanda [x] setelah objek dengan x adalah nilai yang menyatakan data ke-x. x[2] ## [1] 2 y[3] ## [1] &quot;Asam Urat&quot; 2.4.2 Matriks (Matrix) Sama halnya dengan vektor, matriks merupakan struktur data yang hanya dapat menyimpan 1 tipe data saja. Perbedaan antara struktur data ‘matrix’ dengan ‘vector’ berada pada dimensi datanya. Vektor merupakan struktur data berdimensi 1 (hanya memiliki panjang data). Sedangkan matriks adalah struktur data yang berdimensi 2 (memiliki dimensi dan panjang data). Pendefinisian matriks dilakukan dengan menggunakan perintah matrix dengan syntax: matrix(data, nrow, ncol, byrow=FALSE). x &lt;- matrix( c(1:8), 2, 4 ) x ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 4 6 8 dim(x) ## [1] 2 4 dengan: data adalah data yang akan kita gunakan nrow adalah jumlah baris ncol adalah jumlah kolom byrow adalah perintah opsional untuk memilih agar data yang kita miliki didaftarkan berdasarkan baris atau kolom Apakah yang akan terjadi apabila kita menggunakan byrow=FALSE dan byrow=TRUE? Berbeda dengan objek yang berupa vector, pemanggilan data pada objek matrix menggunakan tanda [x,y] dimana x adalah data baris ke-x dan y adalah data kolom ke-y. Apabila kita menggunakan tanda [x,] saja, maka kita memanggil semua data pada baris ke-x. Sedangkan apabila kita menggunakan tanda [,y] saja, maka kita memanggil semua data pada kolom ke-y. x[2,3] ## [1] 6 x[2,] ## [1] 2 4 6 8 x[,4] ## [1] 7 8 x[6] ## [1] 6 Catatan: x dan y pada [x,y] dapat berupa vector. 2.4.3 Daftar (List) Struktur data list dalam R adalah struktur data yang dapat mendaftarkan beberapa objek sekaligus tanpa perlu khawatir dengan tipe data yang berbeda. Struktur data ‘list’ dapat juga dikatakan sebagai vektor yang dapat menyimpan berbagai macam objek. Pendefinisian list dilakukan dengan menggunakan perintah list(). a &lt;- c(1, 3, 6, 2) b &lt;- c(&quot;Apa&quot;, &quot;kabar&quot;, &quot;anda&quot;, &quot;hari&quot;, &quot;ini&quot;, &quot;?&quot;) c &lt;- c(TRUE, FALSE, FALSE, FALSE, TRUE) x &lt;- list(a=a, b=b, c=c) x ## $a ## [1] 1 3 6 2 ## ## $b ## [1] &quot;Apa&quot; &quot;kabar&quot; &quot;anda&quot; &quot;hari&quot; &quot;ini&quot; &quot;?&quot; ## ## $c ## [1] TRUE FALSE FALSE FALSE TRUE Selanjutnya kita dapat memanggil masing-masing objek pada sebuah list dengan syntax: ListObject$ObjekInList atau dengan menggunakan [[x]] dimana x adalah sebuah angka yang merujuk pada daftar ke berapa. x$a ## [1] 1 3 6 2 x[[3]] ## [1] TRUE FALSE FALSE FALSE TRUE 2.4.4 Kerangka Data (Data Frame) Struktur data yang berupa data frame (data.frame) merupakan struktur data yang akan paling sering kita gunakan dalam pengolahan data. Struktur data ini digunakan untuk mendefinisikan sebuah tabel data yang mana setiap kolom adalah nama-nama objek/variabel pada data frame tersebut. Setiap objek/variabel dalam data.frame merupakan sebuah vector. Artinya setiap objek/variabel dalam data.frame hanya dapat memiliki 1 tipe data saja. Selain itu setiap objek/variabel yang berada dalam data.frame harus memiliki jumlah data (length()) yang sama. Perintah data.frame() adalah perintah yang digunakan untuk medefinisikan sebuah objek sebagai sebuah data frame. nama &lt;- c(&quot;Ahmad&quot;, &quot;Ganjar&quot;, &quot;Lusi&quot;, &quot;Andina&quot;, &quot;Elok&quot;) jk &lt;- factor(c(&quot;Laki-laki&quot;, &quot;Laki-laki&quot;, &quot;Perempuan&quot;, &quot;Perempuan&quot;, &quot;Perempuan&quot;)) tb &lt;- c(170, 169, 160, 154, 163) bb &lt;- c(70, 67, 45, 40, 52) x &lt;- data.frame(nama, jk, tb, bb) x ## nama jk tb bb ## 1 Ahmad Laki-laki 170 70 ## 2 Ganjar Laki-laki 169 67 ## 3 Lusi Perempuan 160 45 ## 4 Andina Perempuan 154 40 ## 5 Elok Perempuan 163 52 Table 2.2: Data Mahasiswa 2020 nama jk tb bb Ahmad Laki-laki 170 70 Ganjar Laki-laki 169 67 Lusi Perempuan 160 45 Andina Perempuan 154 40 Elok Perempuan 163 52 Selanjutnya untuk memanggil objek/variabel pada sebuah data.frame mirip dengan memanggil data pada sebuah matrix. Selain itu kita dapat pula memanggil dengan cara menyebutkan nama objek/variabel pada data.frame tersebut. x[,2] ## [1] Laki-laki Laki-laki Perempuan Perempuan Perempuan ## Levels: Laki-laki Perempuan x[4,] ## nama jk tb bb ## 4 Andina Perempuan 154 40 x$nama ## [1] &quot;Ahmad&quot; &quot;Ganjar&quot; &quot;Lusi&quot; &quot;Andina&quot; &quot;Elok&quot; x[,c(&#39;jk&#39;, &#39;nama&#39;)] ## jk nama ## 1 Laki-laki Ahmad ## 2 Laki-laki Ganjar ## 3 Perempuan Lusi ## 4 Perempuan Andina ## 5 Perempuan Elok 2.5 Operator - operator pada R Operator - operator pada R adalah perintah untuk melakukan suatu operasi seperti operasi artimatika, logika dan relasi. Secara umum terdapat 4 tipe operator pada R, yaitu: Operator Aritmatika Operator Logika Operator Relasi 2.5.1 Operator Aritmatika Operator artimatika adalah operator yang digunakan untuk melakukan komputasi dengan menggunakan operasi - operasi matematika seperti penjumlahan, pengurangan, dll. Berikut adalah daftar operator aritmatika pada R: Table 2.3: Operator Aritmatika pada R Operator Operasi + Penjumlahan - Pengurangan * Perkalian / Pembagian ^ Perpangkatan %% Modulo Operator umumnya digunakan untuk pengoperasian pada objek bertipe numeric atau integer dengan struktur data berupa vector dan matrix. Berikut adalah contoh penggunaannya: x &lt;- 3 y &lt;- 5 Table 2.4: Hasil Penggunaan Operator pada R Operator Operasi Hasil + x + y 8.0 - x - y -2.0 * x * y 15.0 / x / y 0.6 ^ x ^ y 243.0 %% x %% y 3.0 2.5.2 Operator Logika Operator logika akan menghasilkan nilai TRUE dan FALSE. Seperti halnya logika matematika, terdapat 2 operator logika yaitu dan (AND), atau (OR) dan ingkaran (NOT). Berikut adalah daftar operator logika pada R: Table 2.5: Operator Logika pada R Operator Operasi ! Bukan/Ingkaran &amp; Logika DAN pada masing-masing anggota objek &amp;&amp; Logika DAN | Logika ATAU || Logika ATAU pada masing-masing anggota objek Berikut adalah contoh hasil penggunaannya: x &lt;- c(TRUE, FALSE, 5) y &lt;- c(TRUE, FALSE, FALSE) z &lt;- c(FALSE, TRUE, TRUE) !x ## [1] FALSE TRUE FALSE x&amp;y ## [1] TRUE FALSE FALSE x&amp;&amp;z ## Warning in x &amp;&amp; z: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; ## Warning in x &amp;&amp; z: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; ## [1] FALSE x|y ## [1] TRUE FALSE TRUE x||z ## Warning in x || z: &#39;length(x) = 3 &gt; 1&#39; in coercion to &#39;logical(1)&#39; ## [1] TRUE Table 2.6: Hasil Penggunaan Operator Logika P1 P2 NegasiP1 NegasiP2 DAN ATAU TRUE TRUE FALSE FALSE TRUE TRUE TRUE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE FALSE TRUE TRUE FALSE FALSE 2.5.3 Operator Relasi Operator relasi adalah operator yang digunakan untuk membandingkan 2 buah nilai/objek. Hasil output dari operator relasi ini adalah TRUE dan FALSE. Berikut adalah daftar operator relasi: Table 2.7: Operasi Relasi pada R Operator Operasi &lt; Kurang dari &lt;= Kurang dari sama dengan &gt; Lebih dari &gt;= Lebih dari sama dengan == Sama dengan != Tidak sama dengan Operator relasi dapat dioperasikan layaknya operator logika. Berikut adalah contoh penggunaannya: x &lt;- 3 y &lt;- 7 z &lt;- 7 x&lt;y ## [1] TRUE x&gt;y ## [1] FALSE x&lt;=y ## [1] TRUE y&lt;=z ## [1] TRUE x!=y ## [1] TRUE y==z ## [1] TRUE 2.5.4 Operator Pipe (%&gt;%) Operator Pipe adalah operator spesial yang terdapat pada paket magrittr. Paket dplyr juga memiliki operator %&gt;% yang dasarnya dibangun oleh paket magnittr. Operator ini membuat kita dapat menjalankan fungsi secara berurutan. Contoh penggunaannya (secara sederhana): x = c(1, 2, 3, 4, 5, 6, 7) # Contoh 1 x %&gt;% mean() ## [1] 4 # Contoh 2 x %&gt;% mean() %&gt;% log() ## [1] 1.386294 Perhatikan bahwa baris pertama menunjukkan sebuah objek x yang berisikan vektor nilai 1 sampai 7. Selanjutnya pada contoh 1 kita menggunkan 1 operator %&gt;% pada objek x yang dilanjutkan dengan fungsi mean(). Apakah dapat dipahami bagaimana cara operator %&gt;% bekerja? x %&gt;% mean() akan menghasilkan nilai rataan dari objek x yang menunjukkan bahwa fungsi mean() (fungsi setelah %&gt;%) digunakan untuk objek sebelumnya %&gt;% yaitu x. Hasil ini akan sama dengan hasil dari mean(x). Contoh 2 menambahkan 1 operator %&gt;% setelah fungsi mean(). Apakah dari hasil yang didapat (1.386294) bisa menjadi petunjuk bagaimana operator %&gt;% bekerja? fungsi setelah operator %&gt;% yang kedua digunakan untuk objek sebelumnya yang mana objek sebelumnya adalah hasil dari x %&gt;% mean(). Hasil ini akan sama dengan hasil dari log(mean(x)). "],["pertemuan-2-manajemen-data.html", "Chapter 3 Pertemuan 2: Manajemen Data 3.1 Import Data 3.2 Indentifikasi Masing-masing Variabel 3.3 Ringkasan data dengan summary() 3.4 Memilih Variabel 3.5 Missing Values (NA) 3.6 Menemukan dan Menghapus Outlier 3.7 Menemukan Noise pada Data 3.8 Membuat Variabel Baru 3.9 Transformasi Variabel 3.10 Recode 3.11 Filter 3.12 Latihan", " Chapter 3 Pertemuan 2: Manajemen Data Capaian Mahasiswa dapat meng-import data dalam format .csv Mahasiswa dapat melakukan identifikasi sederhana pada data Mahasiswa melakukan manajemen data dasar (Memilih Variabel, Missing Values (NA), Menemukan dan Menghapus Outlier, Menemukan Noise pada Data, Membuat Variabel Baru, Transformasi Variabel, Recode, Filter) Alat dan kebutuhan Aplikasi R Studio Paket readr dan tidyverse Koneksi internet Kegitan Manajemen Data merupakan upaya-upaya yang dilakukan oleh sesorang untuk mempersiapkan data mentah ( rawdata ) menjadi data yang terorganisasi dengan baik (siap untuk diolah). Umumnya data mentah yang kita dapat tidak seperti data-data yang digunakan dalam praktik di perkuliahan. Data mentah sering kali memiliki kondisi-kondisi seperti berikut: Terdapat missing value, yang biasanya terjadi karena data yang hilang ataupun tidak lengkap saat peng-entry-an data (terkadang kasusnya sangat banyak) Terdapat outlier, outlier merupakan bagian dari data yang memiliki nilai sangat besar atau sangat kecil. Outlier dalam beberapa kasus memiliki arti tertentu, namun sering kali menjadi masalah dalam pengolahan data berikutnya Terdapat noise, yang merupakan bagian dari data yang tidak dapat diolah. Noise muncul karena kesalahan entry, entry yang kurang tepat, dan lain sebagainya. Selain mengatasi masalah-masalah tersebut, kita juga akan melakukan pembuatan variabel baru, transformasi data, pengkodean ulang ( recode ) dan juga filtering. Selanjutnya kita akan menggunakan dataset pada link dibawah ini untuk latihan manajemen data. &lt;a href=“#”, target=“_blank”&gt;Unduh Dataset&lt;/ a&gt; 3.1 Import Data Import data di RStudio dapat dilakukan dengan 2 cara. Cara yang pertama adalah dengan menggunakan fungsi-fungsi secara manual dan cara yang kedua ialah dengan menggunakan panduan import ( Import Wizard ). Kita akan gunakan cara yang kedua untuk mempermudahkan pengerjaan. Sebelum melakukan import data, instalasi paket readr perlu untuk dilakukan. Ketikan perintah berikut pada jendela console lalu tekan enter: # install.packages(&quot;readr&quot;) Setelah paket readr berhasil ter-instal, lakukan langkah-langkah berikut: Klik Tab Environment pada jendelan ketiga. Klik Import Dataset lalu pilih From Text (readr). Setelah itu akan muncul jendela Import Wizard seperti berikut: knitr::include_graphics(&quot;images//import_01.jpg&quot;) Figure 3.1: Jendela Import Wizard Klik browse lalu pilih file data yang akan digunakan dan klik open. Selanjutnya tampilan Import Wizard akan seperti berikut: Kita dapat memberikan nama objek untuk dataset tersebut. Selain itu kita juga dapat menentukan secara langsung tipe data dari masing-masing variabel (kolom data). Bagian ini dapat dilewati dan klik Import. Pada jendela console secara otomatis akan muncul beberapa fungsi yang digunakan untuk melakukan import data. Kita akan mengambil kode import nya saja untuk diletakkan pada R Script kita. Seleksi perintah import ( read_csv ), tekan Ctrl + C, lalu kembali ke jendela R Script dan tekan Ctrl + V. Terdapat berbagai macam format dalam penyimpanan kerangka data. CSV atau Comma Separated Values merupakan salah satu format data yang mudah untuk di import ke berbagai aplikasi pengolah data. CSV memisahkan data antar kolom/variabel dengan tanda koma (,) atau titik koma (;). Setelah data siap, kita akan memulai proses manajemen data. Objek data mentah (data yang baru saja di import) akan saya biarkan tetap seperti itu (tidak akan diapa-apakan). Sebagai gantinya saya akan membuat objek baru (biasanya menggunakan nama mydata) yang merupakan rawdata (juga) untuk selanjutnya di olah. Hal ini saya lakukan untuk menjaga agar saya masih memiliki data mentah tersebut. Terkadang terjadi kesalahan-kesalahan dalam proses manajemen dan olah data yang membuat saya harus memproses ulang data dari awal. Adanya data mentah tersebut mencegah saya untuk meng-import ulang data mentahnya. rawdata &lt;- read.csv(&quot;G:/Mandat/data_latihan.csv&quot;, sep=&quot;;&quot;) mydata = rawdata head(mydata) ## tinggi berat jk ## 1 172 77 male ## 2 167 75 none ## 3 96 32 none ## 4 202 136 male ## 5 150 49 female ## 6 178 120 male Fungsi head() digunakan untuk menampilkan 6 baris pertama dari data pada console. Sedangkan untuk menampilkan 6 baris terakhir menggunakan fungsi tail(). Setelah memastikan data yang akan diproses siap, selanjutnya kita aktifkan paket yang akan digunakan. Paket tersebut ialah tidyverse. 3.2 Indentifikasi Masing-masing Variabel Sering kali kita akan menemukan data dengan banyak variabel (misal data dari hasil survei skala besar [SDKI 2017]). Tentunya kita harus mengetahui variabel-variabel tersebut sebelum kita melakukan manajemen data (jenis variabel, skala data, dsb.). Identifikasi variabel dapat dilakukan dengan menggunakan perintah str() sebagai berikut: str(mydata) ## &#39;data.frame&#39;: 87 obs. of 3 variables: ## $ tinggi: int 172 167 96 202 150 178 165 97 183 182 ... ## $ berat : num 77 75 32 136 49 120 75 32 84 77 ... ## $ jk : chr &quot;male&quot; &quot;none&quot; &quot;none&quot; &quot;male&quot; ... Fungsi str() akan memunculkan informasi-informasi yang berguna seperti struktur data, jumlah baris (observasi), jumlah kolom (variabel), nama variabel, tipe data pada masing-masing variabel dan beberapa contoh data pertama pada data. Berdasarkan hasil diatas dapat diketahui bahwa mydata memiliki struktur data data.frame; terdapat 87 observasi serta 3 variabel; variabel tinggi bertipe integer (bilangan bulat), variabel berat bertipe numeric dan variabel jk bertipe character. Dengan mengetahui karakteristik data yang kita miliki akan memudahkan kita dalam menentukan tindakan pada data tersebut. Sebagai contoh, variabel jk akan kita ubah tipe datanya dari character ke factor karena variabel tersebut merupakan kategori dari jenis kelamin. Untuk melihat keseluruhan data (data.frame), gunakan fungsi View(mydata) (dengan V kapital). Setelah menjalankan fungsi tersebut pada console maka akan terbuka jendela baru (di Jendela Editor) yang menampilkan data secara keseluruhan. 3.3 Ringkasan data dengan summary() terdapat sebuah fungsi yang dapat memberikan hasil ringkasan pada data. Fungsi tersebut adalah summary(). Fungsi summary() dapat memberikan ringkasan baik pada data yang bertipe numeric, character, dll. Selain itu juga dapat menunjukkan berapa banyak missing data (NA) pada masing-masing variabel. Berikut adalah luaran dari fungsi summary(): Pada data yang bertipe numeric dan integer akan menghasilkan nilai paling rendah (Min.), kuartil pertama (1st Qu.), nilai tengah (Median), rataan (Mean), kuartil ketiga (3rd Qu.) dan nilai paling tinggi (Max.). Pada data yang bertipe factor akan menghasilkan jumlah data pada masing-masing levels nya. Pada data yang beritpe character akan mengahsilkan berapa banyak data (Length) dan tipe data (Class) saja. Hal ini dikarenakan data bertipe character memiliki banyak sekali kemungkinan nilai/hasil (kebetulan saja pada variabel jk hanya ada 2 nilai saja, bagaimana jika data character nya adalah komentar netizen tentang Rizki Billar?). Pada data yang bertipe logical kan menghasilkan tipe data (Mode), jumlah FALSE dan jumlah TRUE. Sekarang kita akan gunakan fungsi summary() pada mydata: summary(mydata) ## tinggi berat jk ## Min. : 66.0 Min. : 15.00 Length:87 ## 1st Qu.:167.0 1st Qu.: 55.60 Class :character ## Median :180.0 Median : 79.00 Mode :character ## Mean :174.4 Mean : 97.31 ## 3rd Qu.:191.0 3rd Qu.: 84.50 ## Max. :264.0 Max. :1358.00 ## NA&#39;s :6 NA&#39;s :28 3.4 Memilih Variabel Setelah mengetahui karakter data yang kita miliki dengan bantuan fungsi str() dan summary(), kita dapat menentukan apakah kelesuruhan variabel akan digunakan atau hanya sebagian variabel saja. Andaikan kita hanya akan menggunakan sebagian data saja, maka gunakan fungsi select() untuk memilih variabel-variabel yang akan digunakan. Berikut cara penggunaannya: mydata2 = mydata %&gt;% dplyr::select(jk, berat, tinggi) head(mydata2) ## jk berat tinggi ## 1 male 77 172 ## 2 none 75 167 ## 3 none 32 96 ## 4 male 136 202 ## 5 female 49 150 ## 6 male 120 178 Masih ingat dengan operator pipe? Kode diatas akan memberikan hasil yang sama dengan kode berikut: mydata2 = dplyr::select(mydata, jk, berat, tinggi) head(mydata2) ## jk berat tinggi ## 1 male 77 172 ## 2 none 75 167 ## 3 none 32 96 ## 4 male 136 202 ## 5 female 49 150 ## 6 male 120 178 Sekarang kita hanya memiliki 3 variabel saja, yaitu jk (jenis kelamin), berat (berat badan) dan tinggi (tinggi badan). 3.5 Missing Values (NA) Dalam R, missing value disimbolkan dengan NA yang berarti Not Avialable. Secara umum missing value mendapatkan 3 perlakuan yaitu dihapus dalam data, diganti dengan nilai rataan (mean), atau kombinasi dari keduanya. Penggantian NA dengan mean hanya dapat dilakukan pada data yang bertipe numeric. 3.5.1 Menghapus NA Penghapusan NA dilakukan apabila kita sudah memastikan bahwa tidak ada variabel (kolom data) yang hanya memiliki nilai NA saja. Hal ini dikarenakan penghapusan NA dilakukan untuk 1 baris. Sehingga andaikan terdapat NA pada salah satu kolom di baris ke-9, maka 1 baris 9 akan dihapus dari data. Bagaimana jika terdapat 1 kolom yang hanya bernilai NA? Penghapusan NA dapat dilakukan dengan menggunakan fungsi na.omit(). mydata3 = mydata2 %&gt;% na.omit() summary(mydata2) ## jk berat tinggi ## Length:87 Min. : 15.00 Min. : 66.0 ## Class :character 1st Qu.: 55.60 1st Qu.:167.0 ## Mode :character Median : 79.00 Median :180.0 ## Mean : 97.31 Mean :174.4 ## 3rd Qu.: 84.50 3rd Qu.:191.0 ## Max. :1358.00 Max. :264.0 ## NA&#39;s :28 NA&#39;s :6 Kode tersebut akan memberikan hasil seperti kode berikut: mydata3 = na.omit(mydata2) summary(mydata2) ## jk berat tinggi ## Length:87 Min. : 15.00 Min. : 66.0 ## Class :character 1st Qu.: 55.60 1st Qu.:167.0 ## Mode :character Median : 79.00 Median :180.0 ## Mean : 97.31 Mean :174.4 ## 3rd Qu.: 84.50 3rd Qu.:191.0 ## Max. :1358.00 Max. :264.0 ## NA&#39;s :28 NA&#39;s :6 3.5.2 Mengganti NA dengan mean Penggantian NA dengan mean hanya perlu dilakukan jika data memiliki terlalu banyak NA. Apabila NA terlalu banyak, maka penghapusan NA dapat menghilangkan data-data lain yang bisa jadi memiliki informasi penting. Mengganti NA denga meanjuga perlu mempertimbangkan berbagai macam hal karena dapat menghasilkan underestimate of standard errors. Berikut adalah kode untuk mengganti NA dengan nilai mean. rataan = mean(mydata2$berat, na.rm = TRUE) mydata2$berat[is.na(mydata2$berat)] = rataan summary(mydata2) ## jk berat tinggi ## Length:87 Min. : 15.00 Min. : 66.0 ## Class :character 1st Qu.: 75.00 1st Qu.:167.0 ## Mode :character Median : 84.00 Median :180.0 ## Mean : 97.31 Mean :174.4 ## 3rd Qu.: 97.31 3rd Qu.:191.0 ## Max. :1358.00 Max. :264.0 ## NA&#39;s :6 Penjelasan kode: mean() berfungsi untuk mendapatkan nilai rataan pada data yang ditentukan, dalam hal ini ialah mydata$berat (variabel berat pada data mydata). na.rm = TRUE berfungsi untuk mengabaikan nilai NA pada variabel berat pada data mydata. Hal ini dilakukan agar perhitungan rataan terlepas dari nilai NA pada data yang bersangkutan (dalam hal ini mydata$berat tanpa mengubah data aslinya pada mydata) is.na() adalah fungsi logika untuk menghasilkan TRUE apabila data bernilai NA dan FALSE jika selain NA dan mydata$berat adalah data variabel berat pada objek mydata. Sehingga is.na(mydata$berat) akan menghasilkan nilai TRUE apabila mydata$berat bernilai NA dan FALSE untuk selain bernilai NA. mydata$berat[is.na(mydata$berat)] bertujuan untuk memberikan hasil TRUE dan FALSE pada variabel berat data mydata. Selanjutnya akan di isi dengan nilai rataan. 3.6 Menemukan dan Menghapus Outlier Outlier atau pencilan merupakan data yang memiliki nilai ekstrim (dapat sangat besar maupun sangat kecil). Sama seperti missing value, pencilan dapat dihilangkan dari data apabila jumlahnya yang sedikit. Apabila jumlah pencilan cukup banyak, maka perlu ada pertimbangan lain sebelum menghilangkan pencilan tersebut. Untuk mendeteksi pencilan dapat dilakukan dengan fungsi summary() atau menggunakan grafik boxplot. Pada bagian sebelumnya yaitu pada #ringkasan-data telah terlihat bahwa terdapat nilai yang sangat besar pada variabel berat yaitu memiliki nilai Max. sebesar 1358 dan nilai Min. sebesar 15.00 sedangkan variabel tersebut memiliki nilai Mean sebesar 97.31. Berdasarkan informasi tersebut dapat diduga bahwa nilai 1358 dan 15.00 bisa jadi merupakan pencilan pada data. Selanjutnya akan kita konfirmasi dugaan tersebut dengan menggunakan boxplot sebagai berikut: boxplot(mydata$berat) Hasil boxplot menunjukkan bahwa terdapat 1 titik data yang nilainya terlampau jauh dari boxplot itu sendiri. Hasil ini mengkonfirmasi dugaan kita sebelumnya bahwa nilai berat 1358.00 adalah pencilan. Selanjutnya kita akan lakukan penghapusan 1 baris data yang memiliki berat sebesar 1358.00. mydata = mydata[mydata$berat&lt;1000, ] summary(mydata) ## tinggi berat jk ## Min. : 66.0 Min. : 15.00 Length:86 ## 1st Qu.:168.5 1st Qu.: 55.30 Class :character ## Median :180.0 Median : 79.00 Mode :character ## Mean :174.0 Mean : 75.58 ## 3rd Qu.:192.5 3rd Qu.: 84.00 ## Max. :234.0 Max. :159.00 ## NA&#39;s :28 NA&#39;s :28 boxplot(mydata$berat) Sekarang kita memiliki hasil yang lebih baik. Perhatikan pada boxplot masih terlihat terdapat 3 buah titik yang berada diluar boxplot. Meskipun ini merupakan pencilan namun dapat kita abaikan karena nilai yang tidak terlampau jauh. Andaikan anda tetap akan menghapus nilai tersebut pun tidak akan terjadi masalah (karena jumlah data yang dihapus masih relatif kecil yaitu 3 observasi dibandingkan keseluruhan observasi yaitu 57 observasi). 3.7 Menemukan Noise pada Data 3.8 Membuat Variabel Baru Terdapat berbagai cara untuk membuat variabel baru di Program R. Dalam modul ini hanya menyajikan 2 cara saja yaitu tanpa dan dengan paket tidyverse. Tanpa paket tidyverse Untuk membuat variabel baru dapat dilakukan dengan mendefinisikan nama_variabel tersebut setelah mydata$ lalu = isian_variabel_baru seperti pada contoh berikut: tinggi_meter = mydata$tinggi / 100 mydata$tinggiM = tinggi_meter head(mydata) ## tinggi berat jk tinggiM ## 1 172 77 male 1.72 ## 2 167 75 none 1.67 ## 3 96 32 none 0.96 ## 4 202 136 male 2.02 ## 5 150 49 female 1.50 ## 6 178 120 male 1.78 Penjelasan: tinggi_meter merupakan objek yang digunakan untuk menyimpan nilai dari mydata$tinggi yang dibagi dengan 100. mydata$tinggiM adalah variabel baru yang akan memuat nilai dari objek tinggi_meter. agar mydata$tinggiM berisi nilai tinggi_meter maka perlu diberi = diantara keduanya. Dengan paket tidyverse Untuk membuat variabel baru dengan menggunakan paket tidyverse dapat dilakukan dengan fungsi mutate(definisi_variabel_baru). Keuntungan dari penggunaan fungsi mutate adalah kita dapat membuat lebih dari 1 variabel baru sekaligus. Berikut contoh penggunaannya: mydata2 = mydata %&gt;% mutate(tinggiM = tinggi / 100) head(mydata2) ## tinggi berat jk tinggiM ## 1 172 77 male 1.72 ## 2 167 75 none 1.67 ## 3 96 32 none 0.96 ## 4 202 136 male 2.02 ## 5 150 49 female 1.50 ## 6 178 120 male 1.78 Penjelasan: Objek mydata2 akan digunakan untuk menyimpan objek mydata yang telah ditambahkan dengan variabel baru. Pada contoh sebelumnya, langkah ini dapat dilakukan dengan menambahkan kode mydata2 = mydata dan mengganti mydata$tinggiM dengan mydata2$tinggiM. mutate(tinggiM = tinggi / 100) membuat variabel baru yaitu tinggiM pada objek mydata. kode diatas memiliki hasil yang sama dengan kode berikut: mutate(mydata, tinggiM = tinggi / 100). Untuk membuat beberapa variabel sekaligus dapat dilakukan dengan menambahkan koma pada akhir pendefinisian variabel sebelumnya. mydatax = mydata %&gt;% mutate(tinggiM = tinggi / 100, var_baru1 = 1, var_baru2 = &quot;ini variabel baru&quot;) head(mydatax) ## tinggi berat jk tinggiM var_baru1 var_baru2 ## 1 172 77 male 1.72 1 ini variabel baru ## 2 167 75 none 1.67 1 ini variabel baru ## 3 96 32 none 0.96 1 ini variabel baru ## 4 202 136 male 2.02 1 ini variabel baru ## 5 150 49 female 1.50 1 ini variabel baru ## 6 178 120 male 1.78 1 ini variabel baru 3.9 Transformasi Variabel Konsep yang digunakan dalam mentranformasi data sama dengan konsep dalam membuat variabel baru yang telah dijelaskan sebelumnya. Berikut adalah contoh dalam membuat variabel IMT: mydata2 = mydata2 %&gt;% mutate(IMT = berat / (tinggiM^2)) 3.10 Recode Dalam hal recode akan ditunjukkan 1 contoh yang menggunkan paket tidyverse. Cara ini dianggap cara yang paling mudah dalam melakukannya. Kode berikut ini bertujuan untuk membuat variabel baru untuk menyimpan kategori-kategori nilai IMT yang telah dibuat sebelumnya. Terdapat 3 kategori yang digunakan dalam contoh ini yaitu: Kurus, kategori IMT untuk nilai IMT yang kurang dari 18 (IMT &lt; 18). Sedang, kategori IMT untuk nilai IMT yang lebih dari sama dengan 18 dan kurang dari sama dengan 25. (IMT &gt;=18 &amp; IMT &lt;= 25). Gemuk, kategori IMT untuk nilai IMT yang lebih dari 25. Dalam contoh ini kita akan membuat variabel baru dengan nama IMTkat menggunakan fungsi mutate(). Sedangkan isian dari IMTkat menggunakan fungsi case_when() yang disesuaikan dengan pendefinisian sebelumnya (kurus, normal dan gemuk). mydata2 &lt;- mydata2 %&gt;% mutate(IMTkat = case_when( IMT &lt; 18 ~ &quot;Kurus&quot;, IMT &gt;= 18 &amp; IMT &lt;= 25 ~ &quot;Normal&quot;, IMT &gt; 25 ~ &quot;Gemuk&quot;) ) Fungsi case_when() mengijinkan kita untuk membuat lebih dari 1 kondisi: IMT &lt; 18 ~ \"Kurus\" akan memberikan nilai Kurus pada variabel yang baru didefinisikan (yaitu IMTkat) apabila variabel IMT memiliki nilai yang kurang dari 18. IMT &gt;= 18 &amp; IMT &lt;= 25 ~ \"Normal\" akan memberikan nilai Normal pada variabel yang baru didefinisikan apabila variabel IMT memiliki nilai yang lebih dari sama dengan 18 dan kurang dari sama dengan 25. IMT &gt; 25 ~ \"Gemuk\" akan memberikan nilai Gemuk pada variabel yang baru didefinisikan apabila variabel IMT memiliki nilai yang lebih dari 25. Perlu diingat bahwa dalam “pendefinisian” case_when() ini tidak menggunakan = melainkan ~. 3.11 Filter Untuk memudahkan dalam penggunaanya, dalam modul ini akan menggunakan fungsi filter() pada paket tidyverse. Secara konsep penggunaannya sama dengan penggunaan fungsi mutate(), hanya saja pada filter akan menggunakan operator hubungan (&lt;, &gt;, ==, !=, dll.) dalam pendefinisiannya. Contoh berikut akan memilih seluruh data pada mydata2 dengan kondisi IMTkat bernilai Gemuk: mydata3 &lt;- mydata2 %&gt;% filter(IMTkat == &quot;Gemuk&quot;) head(mydata3) ## tinggi berat jk tinggiM IMT IMTkat ## 1 172 77 male 1.72 26.02758 Gemuk ## 2 167 75 none 1.67 26.89232 Gemuk ## 3 96 32 none 0.96 34.72222 Gemuk ## 4 202 136 male 2.02 33.33007 Gemuk ## 6 178 120 male 1.78 37.87401 Gemuk ## 7 165 75 female 1.65 27.54821 Gemuk Fungsi filter() juga dapat digunakan untuk beberapa kondisi. Untuk menghubungkan lebih dari 1 kondisi perlu menggunakan operator logika (&amp;, |). Berikut contohnya: mydata3 &lt;- mydata2 %&gt;% filter(IMTkat == &quot;Gemuk&quot; | IMTkat == &quot;Kurus&quot;) summary(mydata3) ## tinggi berat jk tinggiM ## Min. : 66.0 Min. : 17.00 Length:33 Min. :0.660 ## 1st Qu.:165.0 1st Qu.: 48.00 Class :character 1st Qu.:1.650 ## Median :178.0 Median : 75.00 Mode :character Median :1.780 ## Mean :167.8 Mean : 74.45 Mean :1.678 ## 3rd Qu.:190.0 3rd Qu.: 84.00 3rd Qu.:1.900 ## Max. :229.0 Max. :159.00 Max. :2.290 ## IMT IMTkat ## Min. :12.89 Length:33 ## 1st Qu.:17.99 Class :character ## Median :26.03 Mode :character ## Mean :26.68 ## 3rd Qu.:33.33 ## Max. :50.93 3.12 Latihan mydata4 &lt;- mydata2 %&gt;% filter(jk == &quot;male&quot; | jk == &quot;female&quot;) head(mydata4) ## tinggi berat jk tinggiM IMT IMTkat ## 1 172 77 male 1.72 26.02758 Gemuk ## 4 202 136 male 2.02 33.33007 Gemuk ## 5 150 49 female 1.50 21.77778 Normal ## 6 178 120 male 1.78 37.87401 Gemuk ## 7 165 75 female 1.65 27.54821 Gemuk ## 9 183 84 male 1.83 25.08286 Gemuk mydata4 &lt;- mydata4 %&gt;% mutate( JK = case_when( jk == &quot;male&quot; ~ &quot;M&quot;, jk == &quot;female&quot; ~ &quot;F&quot; ) ) "]]
