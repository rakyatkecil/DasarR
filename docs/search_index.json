[["index.html", "Dasar Pemrograman R Chapter 1 Pengantar 1.1 Sejarah Program R 1.2 Program R 1.3 R Studio", " Dasar Pemrograman R â€™dimas 2023-01-02 Chapter 1 Pengantar 1.1 Sejarah Program R R adalah salah satu bahasa pemrograman yang khusus dibuat untuk melakukan komputasi statsistik. Program R dibuat oleh Ross Ihaka dan Robert Gentleman berdasarkan (sangat mirip) pada bahasa pemrogram S yang perlu mengeluarkan beberapa rupiah untuk dapat menggunakannya. Sedangkan R adalah open source. Figure 1.1: Ross Ihaka dan Robert Gentleman 1.2 Program R R secara resmi diluncurkan pertama kali pada 29 Februari 2000 (R 1.0). Banyak pengguna menganggap R adalah sebuah sistem statistika. Hal ini dikarenakan R sangat terinspirasi dengan Program S yang memang dibuat khusus untuk pemrograman statistik. R memberikan banyak kemudahan bagi pemula yang masih baru memulai belajar pemrograman (terutama dalam hal statistik). Hal ini dikarenakan terdapat berbagai fungsi-fungsi dasar statistik yang sangat mirip dengan nama metode statistikanya, seperti untuk menghitung nilai rata-rata (mean) menggunakan fungsi mean() di R. Selain dapat digunakan dalam berbagai macam teknik statistika (dengan menggunakan paket yang berkaitan tentunya), R dapat digunakan untuk membuat grafik sesuai dengan kebutuhan penggunanya. Salah satu keunggulan R adalah memiliki komunitas yang besar. Siapa saja dapat membuat sebuah paket yang terdiri dari berbagai fungsi. Paket-paket dalam R dikembangkan dari berbagai bidang seperti ahli statistik, programmer, psikolog, dsb. Setiap paket memiliki tujuan masing-masing sesuai dengan kegunaan yang diinginkan oleh pembuatnya. Kenapa harus menggunakan R? Gratis dan open source. Tersedia untuk Windows, Macintosh dan Linux. Kualitas gambar yang bagus. Pengguna dapat menentukan penggunaan metode statistika dengan algoritma tertentu. Ketersediaan berbagai macam paket statistik ( statistical packages ) yang dapat digunakan secara gratis. 1.2.1 Instalasi Program R Untuk menjalankan R, maka langkah pertama yang harus dilakukan adalah melakukan instalasi Program R di komputer/laptop anda. Paket instalasi Program R dapat di unduh pada link berikut: for Windows for Macintosh Setelah paket instalasi berhasil di unduh, selanjutnya klik 2x pada paket tersebut lalu ikuti langkah-langkah sebagai berikut: Pilih bahasa yang akan digunakan. Lalu klik next Figure 1.2: Pilih Bahasa yang Akan Digunakan Baca Lisensi Program. Setelah itu klik next Figure 1.3: Lisensi Program Pilih folder tempat (direktori) R di instal. Lalu klik next Figure 1.4: Pilih Direktori Tempat R Diinstal Pilih komponen yang akan di instal (dapat dipilih semua). Lalu klik next Figure 1.5: Pemilihan Komponen yang akan Diinstal Selanjutnya pemilihan startup. Pilih No, Lalu klik next Figure 1.6: Pemilihan Startup Lalu tunggu hingga proses instalasi selesai. Lalu klik next (jika diperlukan). Figure 1.7: Proses Instalasi Instalasi R telah selesai. Klik finish Figure 1.8: Proses Instalasi telah Selesai Dapat dipastikan kembali bahwa proses instalasi program telah berjalan dengan membuka program. Apabila tidak muncul permasalahan ( error ), maka proses instalasi program telah berhasil. Figure 1.9: Icon Program R pada Layar Desktop 1.3 R Studio R Studio atau RStudio adalah open source integrated development environment IDE untuk R. R harus ter-instal terlebih dahulu sebelum melakukan instalasi RStudio. Tampilan antarmuka RStudio yang terorganisasi dengan baik membuat pengguna dapat melihat dengan jelas kode R, grafik, tabel data, dan output secara bersamaan. Selain itu terdapat fasilitas Import Wizard (panduan import) seperti di program-program lain. R juga dapat mengimgport berbagai macam jenis file data seperti CSV, XLS/XLSX, SAS, SPSS, Stata tanpa harus membuat kode untuk melakukannya. 1.3.1 Instalasi Program R Studio Untuk melakukan instalasi program RStudio, unduh file paket instalasi pada link berikut: for Windows for Macintosh for Ubuntu 18+ / Debian 10+ Setelah paket instalasi berhasil di unduh, selanjutnya klik 2x pada paket tersebut lalu ikuti langkah-langkah sebagai berikut: Klik next pada jendela pertama. Figure 1.10: Jendela Pertama Instalasi RStudio Pilih direktori tempat RStudio di instal. Figure 1.11: Pemilihan Direktori Instalasi RStudio Pilih nama direktori untuk menu di Start Menu Pilih direktori tempat RStudio di instal. Figure 1.12: Pemilihan Direktori di Start Menu Tunggu hingga proses instalasi selesai lalu klik finish. Pilih direktori tempat RStudio di instal Figure 1.13: Proses Instalasi RStudio Lakukan pengecekan kembali untuk memastikan RStudio telah terinstal. Figure 1.14: Pengecekan RStudio di Start Menu 1.3.2 Lingkungan Kerja RStudio Sebelum membahas tentang lingkungan kerja RStudio, siapkan R Script terlebih dahulu. Klik File -&gt; New File -&gt; R Script, atau gunakan tombol Ctrl + Shift + N. Selanjutnya tampilan antarmuka RStudio akan seperti gambar berikut: Figure 1.15: Tampilan Antarmuka RStudio Terdapat 4 jendela dalam RStudio. Masing-masing jendela memiliki kegunaannya masing-masing dan dalam praktikya, hampir semua jendela akan digunakan. Sehingga pemahaman terhadap kegunaan setiap jendela adalah langkah pertama sebelum belajar lebih jauh dalam menggunakan RStudio. Berikut pembagian jendela pada Rstudio: Figure 1.16: Pembagian Jendela Antarmuka RStudio Berikut penjelasan pada masing-masing jendela: R Script Editor R Script Editor adalah tempat kita untuk membuat dan menyusun kode-kode R yang akan dijalankan di Jendela Console. Secara teknis pengerjaan R dilakukan pada Console, namun dalam praktiknya pengguna biasanya tidak hanya menggunakan 1 atau 2 baris kode saja, namun hingga ratusan baris kode. Jika ratusan baris kode di susun dalam Console akan membuat pengguna kesulitan dalam melanjutkan pada baris berikutnya (karena lupa, atau ada yang kode yang salah). Apabila kode-kode tersebut disusun dalam R Script, pengguna dapat dengan bebas mengganti kode-kode yang salah hingga menyusun ulang kode yang dibuat. Tentu hal ini membuat pekerjaan jauh lebih mudah. Console Jendela Console adalah jendela untuk menjalankan kode-kode R (R Script). Setiap kode R hanya dapat dijalankan di Console. Untuk melihat cara kerjanya secara langsung, coba ketikan kode 5 + 5 di R Script lalu tekan Enter. Perhatikan apakah RStudio memberikan hasil dari 5 + 5 tersebut? Tentu tidak akan terjadi apa-apa pada RStudio. Nah, sekarang ketikan 5 + 5 di Console lalu tekan Enter. Perhatikan bahwa dalam Console 5 + 5 akan menghasilkan nilai 10. Hal ini menunjukkan bahwa R Script bukanlah tempat untuk menjalankan kode R, melainkan Console. Untuk menjalakan kode dari R Script ke Console dapat dilakukan dengan meletakkan cursor pada baris yang akan dijalankan pada Console lalu tekan Ctrl + Enter. Environment, History, Connection, Tutorial Jendela ke-3 yang akan sering digunakan adalah Tab Environment. Tab Environment menunjukkan objek-objek yang ada atau telah kita buat (pembuatan objek akan dibahas pada chapter berikutnya). Files, Packages, Plot, Help, Viewer, Presentation Jendela ke-4 yang akan sering digunakan terutama bagi pemula adalah Tab Files, Packages, Plot dan Help. Tab Files menunjukkan file-file yang ada pada direktori kerja kita (akan menyesuaikan dengan proyek yang digunakan). Direktori kerja akan sangat membatu saat kita bekerja dengan beberapa file R Script atau file lainnya (data, gambar, dsb.). Tab Packages adalah jendela yang menunjukkan paket-paket R yang telah ter-instal di RStudio (penjelasan paket akan dibahas pada chapter berikutnya). Apabila paket tersebut telah ter-instal maka kita dapat mengaktifkan paket dengan men-centang pada kotak disebelah kiri paket (dapat diaktifkan juga dengan kode library(nama_paket). Tab Plot ini akan memunculkan grafik-grafik yang telah kita buat (pembuatan grafik akan dibahas pada chapter Membuat Grafik dengan ggplot2). Tab Help akan digunakan apabila kita ingin mngetahui bagaimana syntax (tata cara penggunaan/susunan fungsi) dari suatu fungsi. Selain itu jendela ini juga dapat digunakan untuk melihat fungsi-fungsi apa saja ya tersedia dalam sebuah paket. Save Workspace berguna untuk menyimpan environment dan history yang telah ada saat itu, sehingga environment dan history akan tetap seperti yang sebelumnya saat membuka kembali proyek tersebut. Workspace biasanya disimpan saat kita bekerja dengan banyak fungsi dan objek yang akan digunakan kembali saat proyek dibuka. Namun biasanya dalam perkuliahan topik selanjutnya akan menggunakan data yang berbeda, sehingga menyimpan workspace tidak disarankan agar tidak membuat kebingungan. 1.3.3 Membuat Projek Baru RStudio memberikan kita kemudahan dalam membagi pekerjaan dengan menggunakan konsep Proyek. Setiap proyek memiliki lingkungan kerjanya masing-masing. Hal ini merupakan salah satu hal yang membuat RStudio sangat digemari bahkan dikalangan programmer. Membuat sebuah proyek baru dapat dilakukan dengan cara sebagai berikut: Klik Tombol Project (None) pada posisi kanan atas. Stelah itu akan muncul jendela sebagai berikut. Klik New Directory jika belum menyiapkan direktori kerja utama untuk menyimpan proyek, atau klik Existing Directory jika sudah memiliki direktori kerja utama yang telah ditentukan Figure 1.17: Membuat Proyek Baru Selanjutnya dapat disesuaikan. Pilih New Project jika yang akan dikerjakan ini masih baru (belum masuk dalam proyek manapun). Figure 1.18: Proses Pembuatan Proyek Baru (step 2) Selanjutnya tentukan nama sub direktori kerja jika sub direktori kerja yang diinginkan tidak ada. Lalu klik Create Project. Jika sebelumnya telah memiliki sub direktori kerja, klik Browse... untuk memilih direktori secara manual. Figure 1.19: Proses Pembuatan Proyek Baru (step 3) Setelah itu maka tampilan RStudio akan kembali seperti semula. (Perhatikan pada bagian kanan atas, nama proyek sudah menyesuaikan dengan nama yang kita buat sebelumnya. Bukan lagi dengan nama Project (None)) Figure 1.20: Proses Pembuatan Proyek Baru (step 4) "],["objek-dan-paket.html", "Chapter 2 Objek dan Paket 2.1 Objek 2.2 Paket (Packages)", " Chapter 2 Objek dan Paket 2.1 Objek Objek merupakan sebuah wadah untuk menyimpan informasi (dapat berupa nilai, data, ataupun lainnya) yang telah didefinisikan. Penyimpanan informasi ke dalam sebuah objek memberikan kemudahan bagi pengguna R untuk memanggil informasi yang sama berulang kali hanya dengan memanggil nama objeknya saja. Seringkali sebuah informasi memiliki banyak bagian didalamnya seperti data frame atau kerangka data (memiliki kolom-kolom variabel). Informasi ini akan sangat merepotkan jika harus memanggilnya berulang kali, sehingga dengan mendefinisikannya ke dalam sebuah objek akan mempercepat proses pengerjaannya. Terdapat beberapa cara dalam mendefinisikan objek pada R seperti yang tersajikan pada tabel berikut: Table 2.1: Operator Pendefinisian Objek pada R Operator Operasi &lt;-, = Mendefinisikan objek sebelah kiri -&gt; Mendefinisikan objek sebelah kanan Contoh penggunaannya adalah sebagai berikut: a &lt;- 4 b &lt;- c(1, 4, 6, 8, 5) c = c(&quot;Indonesia&quot;, &quot;Raya&quot;) d = data.frame(X = c(1, 2, 3, 4, 5), Y = c(&quot;Rondi&quot;, &quot;Anis&quot;, &quot;Alya&quot;, &quot;Budi&quot;, &quot;Surya&quot;)) Setelah objek didefinisikan, selanjutnya pemanggilan objek dapat dilakukan dengan menggunakan nama obejeknya saja. Contoh, akan kita panggil ketiga objek yang telah didefinisikan sebelumnya yaitu a, b, c, d dengan mengetikan masing-masing objek tersebut secara bergantian di Console. Berikut hasilnya: a ## [1] 4 b ## [1] 1 4 6 8 5 c ## [1] &quot;Indonesia&quot; &quot;Raya&quot; d ## X Y ## 1 1 Rondi ## 2 2 Anis ## 3 3 Alya ## 4 4 Budi ## 5 5 Surya Objek-objek tersebut telah terdefinisikan di RStudio. Perhatikan pada Jendela Environment saat ini sudah ada 4 buah objek yang didefinisikan sebelumnya. Figure 2.1: Jendela Environment yang Sudah Terdapat Objek Objek-objek tersebut dapat dihapu ataupun digantikan dengan nilai yang baru. Untuk menghapus sebuah objek dapat dilakukan dengan menggunakan fungsi rm(nama_objek). Contoh: a = 79 rm(b) Sekarang objek a telah memiliki nilai baru yaitu 79 dan objek b tidak tersedia pada Jendela Environment. Figure 2.2: Jendela Environment setelah Penggantian Objek a dan Penghapusan Objek b 2.2 Paket (Packages) R Packages adalah unit yang sangat fundamental dalam Program R. Dalam sebuah R Packages berisi kode-kode yang dapat digunakan, sampel data dan dokumentasi yang telah dideskripsikan dengan baik untuk mempermudah penggunaannya. Terdapat berbagai macam paket yang tersedia di software repository CRAN ( The Comprehensive R Archive Network ) yang merupakan pusat arsip dari versi-versi paket terbaru dan yang lama (biasanya paket diperbarui oleh pembuatnya untuk keperluan kemudahan penggunanya atau menyesuaikan dengan update terbaru dari R). Tercatat bahwa pada November 2020 sudah terdapat lebih dari 16.000 paket yang tersedia di CRAN. Sebagai contoh penggunaan paket, akan dilakukan pembuatan grafik dengan menggunakan fungsi plot() yang merupakan fungsi bawaan dari R (dari paket base) dibandingkan dengan grafik yang menggunakan paket ggplot2. Berikut Hasilnya: Figure 2.3: Diagram Pencar Dengan dan Tanpa Menggunakan Paket Untuk melakukan instalasi paket, pertama siapkan jaringan internet yang baik. Paket akan di unduh dari repository CRAN. Setelah jaringan internet stabil, gunakan fungsi install.packages(\"nama_paket\") lalu jalankan pada Console. Pastikan jaringan internet stabil selama proses instalasi paket berlangsung. Biasanya paket-paket dalam R tidak dapat berdiri sendiri atau memerlukan paket lain yang juga harus terinstal. Apabila terdapat 1 paket lain yang diperlukan namun gagal terinstal, maka paket yang akan kita gunakan tidak akan berjalan. Saat ini terjadi biasanya nama paket tidak akan muncul di Tab Packages (beberapa kasus nama paket muncul namun tidak dapat menggunakan fungsi yang ada). Apabila paket tidak berfungsi dengan baik, maka lakukan instalasi ulang pada paket tersebut. Figure 2.4: Contoh Paket ggplot2 yang Sudah Terinstal dan Dapat Digunakan Secara default CRAN menjadi repository untuk mengunduh paket di RStudio. Sehingga kita tidak perlu mengatur repository lagi. Berikut adalah beberapa daftar paket yang harus sudah terinstal (dan dapat digunakan) untuk topik Program R. tidyverse Digunakan untuk melakukan manajemen pada data. Cara instal paket dengan menjalankan fungsi install.packages(\"tidyverse\") pada console ggplot2 Digunakan untuk membuat grafik yang lebih bagus. Cara instal paket dengan menjalankan fungsi install.packages(\"ggplot2\") pada console dgof Digunakan untuk melakukan uji normalitas menggunakan Metode Kolmogorov-Smirnov. Cara instal paket dengan menjalankan fungsi install.packages(\"dgof\") pada console "],["datatype.html", "Chapter 3 Tipe Data 3.1 Numerik (Numeric) 3.2 Bilangan Bulat (Integer) 3.3 Bilangan Kompleks (Complex) 3.4 Logika (Logical) 3.5 Teks (Character) 3.6 Faktor (Factor)", " Chapter 3 Tipe Data Terdapat 6 tipe data pada bahasa pemrograman R. Setiap tipe data tersebut memiliki karakteristik sendiri sehingga tidak terjadi tumpang tindih dalam melakukan berbagai macam pengoperasiannya. Berikut adalah 6 tipe data pada bahasa pemrograman R: 3.1 Numerik (Numeric) Tipe data numerik adalah tipe data yang berupa nilai/angka desimal. Tipe data ini merupakan tipe data yang dapat digunakan untuk melakukan operasi-operasi aritmatika seperti penjumlahan, pengurangan, perkailan, dsb. Jika kita definisikan objek x dengan suatu nilai/angka, maka tipe objek tersbut adalah numeric. x &lt;- 2.6 class(x) ## [1] &quot;numeric&quot; Bahkan R akan mendefinisikan objek dengan tipe numeric jika berikan angka tanpa desimal. x &lt;- 5 class(x) ## [1] &quot;numeric&quot; 3.2 Bilangan Bulat (Integer) Seperti yang kita tahu bahwa pendefinisian angka pada suatu objek akan secara otomatis membuat objek tersebut bertipe numeric. Sedangkan untuk mendefinisikan objek dengan tipe integer harus mendefinisikan secara khusus objek tersebut dengan perintah as.integer. x &lt;- as.integer(5) class(x) ## [1] &quot;integer&quot; Selain itu kita dapat mendefinisikan sebuah objek yang bertipe integer dengan menambahkan huruf L kapital pada akhir angka. x &lt;- 3L class(x) ## [1] &quot;integer&quot; Bagaimana jika kita berikan angka desimal pada objek yang kita definisikan sebagai integer? x &lt;- as.integer(3.76) 3.3 Bilangan Kompleks (Complex) Bilangan kompleks dalam matematika adalah bilangan yang didefinisikan dengan \\(a + bi\\), dengan \\(a\\) dan \\(b\\) adalah bilangan real. Sedangkan \\(i\\) adalah bilangan imajiner dan menyebabkan \\(bi\\) menjadi imajiner. Bilangan imajiner sendiri memiliki sifat \\(i^{2}=1\\). Kita harus secara langsung mendefinisikan objek sebagai bilangan kompleks agar mendapatkan sebuah objek yang bertipe complex. x &lt;- 2 + 4i class(x) ## [1] &quot;complex&quot; 3.4 Logika (Logical) Objek dengan tipe logika adalah objek yang hanya memiliki 2 nilai saja yaitu TRUE dan FALSE. x &lt;- TRUE class(x) ## [1] &quot;logical&quot; 3.5 Teks (Character) Pendefinisian objek dengan tipe teks (character) merupakan hal yang cukup mudah. Kita perlu menambahkan tanda petik \" pada awal dan akhir teks. Setelah itu objek akan terdefinisikan sebagai character. x &lt;- &quot;Aplikasi Komputer&quot; class(x) ## [1] &quot;character&quot; x ## [1] &quot;Aplikasi Komputer&quot; Apakah tipe data dari objek yang didefinisikan dengan nilai \"2.4\"? 3.6 Faktor (Factor) Faktor adalah tipe data pada bahasa pemrograman R yang digunakan untuk mendefinisikan sebuah objek menjadi sebuah objek dengan tipe data kategorik. Perintah yang digunakan untuk merubah sebuah objek menjadi sebuah faktor adalah factor(). x &lt;- factor(c(1, 2, 3)) y &lt;- factor(c(&quot;SD&quot;, &quot;SMP&quot;, &quot;SMA&quot;, &quot;SMA&quot;, &quot;PT&quot;)) x ## [1] 1 2 3 ## Levels: 1 2 3 y ## [1] SD SMP SMA SMA PT ## Levels: PT SD SMA SMP Sebuah objek yang telah didefinisikan sebagaik faktor akan memiliki levels yang merupakan daftar kategori yang terdapat pada objek tersebut. Kita dapat menggunakan perintah levels untuk dapat memunculkan levels nya saja. levels(x) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; levels(y) ## [1] &quot;PT&quot; &quot;SD&quot; &quot;SMA&quot; &quot;SMP&quot; Apa perbedaan output dari objek yang bertipe factor dengan objek yang bertipe numeric? Apa perbedaan output dari objek yang bertipe factor dengan objek yang bertipe character? "],["struktur-data.html", "Chapter 4 Struktur Data 4.1 Vektor (Vector) 4.2 Matriks (Matrix) 4.3 Daftar (List) 4.4 Kerangka Data (Data Frame)", " Chapter 4 Struktur Data Struktur data pada bahasa pemrograman R adalah sebuah konsep yang digunakan untuk menyimpan data berdasarkan kebutuhannya. Berdasarkan struktur datanya, terdapat 4 struktur data yang dapat kita definisikan pada program R: Vektor (vector) Matriks (matrix) Pendafaran (list) Kerangka Data (data.frame) 4.1 Vektor (Vector) Vektor adalah struktur data yang paling sederhana pada bahasa pemrograman R. Vektor memuat barisan data dengan tipe data yang sama. Pendefinisian vektor dilakukan dengan menggunakan perintah c(). Semua data ditulis didalam tanda kurung dan setiap data dipisahkan dengan tanda koma ,. x &lt;- c(1:5) x ## [1] 1 2 3 4 5 y &lt;- c(&quot;Hipertensi&quot;, &quot;Diabetes&quot;, &quot;Asam Urat&quot;) y ## [1] &quot;Hipertensi&quot; &quot;Diabetes&quot; &quot;Asam Urat&quot; length(x) ## [1] 5 length(y) ## [1] 3 Apa yang terjadi apabila sebuah vektor diisi dengan 2 tipe data? misalnya c(12, 4, TRUE) Selanjutnya kita dapat memanggil anggota dari sebuah objek vector dengan menggunakan tanda [x] setelah objek dengan x adalah nilai yang menyatakan data ke-x. x[2] ## [1] 2 y[3] ## [1] &quot;Asam Urat&quot; 4.2 Matriks (Matrix) Sama halnya dengan vektor, matriks merupakan struktur data yang hanya dapat menyimpan 1 tipe data saja. Perbedaan antara struktur data â€˜matrixâ€™ dengan â€˜vectorâ€™ berada pada dimensi datanya. Vektor merupakan struktur data berdimensi 1 (hanya memiliki panjang data). Sedangkan matriks adalah struktur data yang berdimensi 2 (memiliki dimensi dan panjang data). Pendefinisian matriks dilakukan dengan menggunakan perintah matrix dengan syntax: matrix(data, nrow, ncol, byrow=FALSE). x &lt;- matrix( c(1:8), 2, 4 ) x ## [,1] [,2] [,3] [,4] ## [1,] 1 3 5 7 ## [2,] 2 4 6 8 dim(x) ## [1] 2 4 dengan: data adalah data yang akan kita gunakan nrow adalah jumlah baris ncol adalah jumlah kolom byrow adalah perintah opsional untuk memilih agar data yang kita miliki didaftarkan berdasarkan baris atau kolom Apakah yang akan terjadi apabila kita menggunakan byrow=FALSE dan byrow=TRUE? Berbeda dengan objek yang berupa vector, pemanggilan data pada objek matrix menggunakan tanda [x,y] dimana x adalah data baris ke-x dan y adalah data kolom ke-y. Apabila kita menggunakan tanda [x,] saja, maka kita memanggil semua data pada baris ke-x. Sedangkan apabila kita menggunakan tanda [,y] saja, maka kita memanggil semua data pada kolom ke-y. x[2,3] ## [1] 6 x[2,] ## [1] 2 4 6 8 x[,4] ## [1] 7 8 x[6] ## [1] 6 Catatan: x dan y pada [x,y] dapat berupa vector. 4.3 Daftar (List) Struktur data list dalam R adalah struktur data yang dapat mendaftarkan beberapa objek sekaligus tanpa perlu khawatir dengan tipe data yang berbeda. Struktur data â€˜listâ€™ dapat juga dikatakan sebagai vektor yang dapat menyimpan berbagai macam objek. Pendefinisian list dilakukan dengan menggunakan perintah list(). a &lt;- c(1, 3, 6, 2) b &lt;- c(&quot;Apa&quot;, &quot;kabar&quot;, &quot;anda&quot;, &quot;hari&quot;, &quot;ini&quot;, &quot;?&quot;) c &lt;- c(TRUE, FALSE, FALSE, FALSE, TRUE) x &lt;- list(a=a, b=b, c=c) x ## $a ## [1] 1 3 6 2 ## ## $b ## [1] &quot;Apa&quot; &quot;kabar&quot; &quot;anda&quot; &quot;hari&quot; &quot;ini&quot; ## [6] &quot;?&quot; ## ## $c ## [1] TRUE FALSE FALSE FALSE TRUE Selanjutnya kita dapat memanggil masing-masing objek pada sebuah list dengan syntax: ListObject$ObjekInList atau dengan menggunakan [[x]] dimana x adalah sebuah angka yang merujuk pada daftar ke berapa. x$a ## [1] 1 3 6 2 x[[3]] ## [1] TRUE FALSE FALSE FALSE TRUE 4.4 Kerangka Data (Data Frame) Struktur data yang berupa data frame (data.frame) merupakan struktur data yang akan paling sering kita gunakan dalam pengolahan data. Struktur data ini digunakan untuk mendefinisikan sebuah tabel data yang mana setiap kolom adalah nama-nama objek/variabel pada data frame tersebut. Setiap objek/variabel dalam data.frame merupakan sebuah vector. Artinya setiap objek/variabel dalam data.frame hanya dapat memiliki 1 tipe data saja. Selain itu setiap objek/variabel yang berada dalam data.frame harus memiliki jumlah data (length()) yang sama. Perintah data.frame() adalah perintah yang digunakan untuk medefinisikan sebuah objek sebagai sebuah data frame. nama &lt;- c(&quot;Ahmad&quot;, &quot;Ganjar&quot;, &quot;Lusi&quot;, &quot;Andina&quot;, &quot;Elok&quot;) jk &lt;- factor(c(&quot;Laki-laki&quot;, &quot;Laki-laki&quot;, &quot;Perempuan&quot;, &quot;Perempuan&quot;, &quot;Perempuan&quot;)) tb &lt;- c(170, 169, 160, 154, 163) bb &lt;- c(70, 67, 45, 40, 52) x &lt;- data.frame(nama, jk, tb, bb) x ## nama jk tb bb ## 1 Ahmad Laki-laki 170 70 ## 2 Ganjar Laki-laki 169 67 ## 3 Lusi Perempuan 160 45 ## 4 Andina Perempuan 154 40 ## 5 Elok Perempuan 163 52 Table 4.1: Data Mahasiswa 2020 nama jk tb bb Ahmad Laki-laki 170 70 Ganjar Laki-laki 169 67 Lusi Perempuan 160 45 Andina Perempuan 154 40 Elok Perempuan 163 52 Selanjutnya untuk memanggil objek/variabel pada sebuah data.frame mirip dengan memanggil data pada sebuah matrix. Selain itu kita dapat pula memanggil dengan cara menyebutkan nama objek/variabel pada data.frame tersebut. x[,2] ## [1] Laki-laki Laki-laki Perempuan Perempuan ## [5] Perempuan ## Levels: Laki-laki Perempuan x[4,] ## nama jk tb bb ## 4 Andina Perempuan 154 40 x$nama ## [1] &quot;Ahmad&quot; &quot;Ganjar&quot; &quot;Lusi&quot; &quot;Andina&quot; ## [5] &quot;Elok&quot; x[,c(&#39;jk&#39;, &#39;nama&#39;)] ## jk nama ## 1 Laki-laki Ahmad ## 2 Laki-laki Ganjar ## 3 Perempuan Lusi ## 4 Perempuan Andina ## 5 Perempuan Elok "],["operator---operator-pada-r.html", "Chapter 5 Operator - operator pada R 5.1 Operator Aritmatika 5.2 Operator Logika 5.3 Operator Relasi", " Chapter 5 Operator - operator pada R Operator - operator pada R adalah perintah untuk melakukan suatu operasi seperti operasi artimatika, logika dan relasi. Secara umum terdapat 4 tipe operator pada R, yaitu: Operator Aritmatika Operator Logika Operator Relasi 5.1 Operator Aritmatika Operator artimatika adalah operator yang digunakan untuk melakukan komputasi dengan menggunakan operasi - operasi matematika seperti penjumlahan, pengurangan, dll. Berikut adalah daftar operator aritmatika pada R: Table 5.1: Operator Aritmatika pada R Operator Operasi + Penjumlahan - Pengurangan * Perkalian / Pembagian ^ Perpangkatan %% Modulo Operator umumnya digunakan untuk pengoperasian pada objek bertipe numeric atau integer dengan struktur data berupa vector dan matrix. Berikut adalah contoh penggunaannya: x &lt;- 3 y &lt;- 5 Table 5.2: Hasil Penggunaan Operator pada R Operator Operasi Hasil + x + y 8.0 - x - y -2.0 * x * y 15.0 / x / y 0.6 ^ x ^ y 243.0 %% x %% y 3.0 5.2 Operator Logika Operator logika akan menghasilkan nilai TRUE dan FALSE. Seperti halnya logika matematika, terdapat 2 operator logika yaitu dan (AND), atau (OR) dan ingkaran (NOT). Berikut adalah daftar operator logika pada R: Table 5.3: Operator Logika pada R Operator Operasi ! Bukan/Ingkaran &amp; Logika DAN pada masing-masing anggota objek &amp;&amp; Logika DAN | Logika ATAU || Logika ATAU pada masing-masing anggota objek Berikut adalah contoh hasil penggunaannya: x &lt;- c(TRUE, FALSE, 5) y &lt;- c(TRUE, FALSE, FALSE) z &lt;- c(FALSE, TRUE, TRUE) !x ## [1] FALSE TRUE FALSE x&amp;y ## [1] TRUE FALSE FALSE x&amp;&amp;z ## Warning in x &amp;&amp; z: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## Warning in x &amp;&amp; z: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] FALSE x|y ## [1] TRUE FALSE TRUE x||z ## Warning in x || z: &#39;length(x) = 3 &gt; 1&#39; in ## coercion to &#39;logical(1)&#39; ## [1] TRUE Table 5.4: Hasil Penggunaan Operator Logika P1 P2 NegasiP1 NegasiP2 DAN ATAU TRUE TRUE FALSE FALSE TRUE TRUE TRUE FALSE FALSE TRUE FALSE TRUE FALSE TRUE TRUE FALSE FALSE TRUE FALSE FALSE TRUE TRUE FALSE FALSE 5.3 Operator Relasi Operator relasi adalah operator yang digunakan untuk membandingkan 2 buah nilai/objek. Hasil output dari operator relasi ini adalah TRUE dan FALSE. Berikut adalah daftar operator relasi: Table 5.5: Operasi Relasi pada R Operator Operasi &lt; Kurang dari &lt;= Kurang dari sama dengan &gt; Lebih dari &gt;= Lebih dari sama dengan == Sama dengan != Tidak sama dengan Operator relasi dapat dioperasikan layaknya operator logika. Berikut adalah contoh penggunaannya: x &lt;- 3 y &lt;- 7 z &lt;- 7 x&lt;y ## [1] TRUE x&gt;y ## [1] FALSE x&lt;=y ## [1] TRUE y&lt;=z ## [1] TRUE x!=y ## [1] TRUE y==z ## [1] TRUE "],["plot-dengan-ggplot2.html", "Chapter 6 Plot dengan ggplot2 6.1 Bar Plot 6.2 Histogram 6.3 Pie Plot 6.4 Box Plot 6.5 Scatter Plot 6.6 Line Plot 6.7 Area Plot", " Chapter 6 Plot dengan ggplot2 Plot adalah salah satu hal mendasar yang dapat digunakan untuk menggambarkan distribusi data. Program R pun memiliki perintah - perintah untuk membuat sebuah plot. Namun perintah - perintah tersebut masih merupakan perintah yang sederhana. Hasilnya, gambar kurang menarik untuk disajikan pada khalayak umum. ggplot2 merupakan sebuah paket yang dapat digunakan pada program R dengan cara melakukan instalasi terlebih dahulu menggunakan perintah install.package(\"ggplot2\"). Paket ggplot2 memberikan fasilitas bagi penggunanya dalam membuat sebuah plot yang menarik untuk dilihat. Setelah anda memahami jenis-jenis plot beserta cara penggunaannya, kita dapat menggunakan paket ggpubr yang telah disusun khusus untuk kebutuhan publikasi/penerbitan. Setelah instalasi paket ggplot2 selesai, selanjutnya kita dapat memanggil paket tersebut dengan perintah library(ggplot2) 6.1 Bar Plot Grafik batang merupakan grafik yang digunakan untuk menunjukkan frekuensi dari dara. Grafik batang lebih sering digunakan untuk menunjukkan perbedaan jumlah dari data yang bertipe kategorik seperti jenis kelamin, asal daerah, status perniahan, dsb. Selanjutnya kita akan membuat sebuah grafik batang dengan menggunakan data berikut: jpc &lt;- c(34, 25, 69, 40, 30, 32, 45) hr &lt;- c(&quot;Sen&quot;, &quot;Sel&quot;, &quot;Rab&quot;, &quot;Kam&quot;, &quot;Jum&quot;, &quot;Sab&quot;, &quot;Min&quot;) x &lt;- data.frame(Hari = hr, Pasien = jpc) x ## Hari Pasien ## 1 Sen 34 ## 2 Sel 25 ## 3 Rab 69 ## 4 Kam 40 ## 5 Jum 30 ## 6 Sab 32 ## 7 Min 45 Terdapat perintah barplot dalam R yang merupakan perintah yang sudah tersedia saat melakukan instalasi R. Walapun perintah barplot dapat kita gunakan, namun hasil yang diberikan sangat sederhana dan lebih cocok digunakan untuk sebuah laporan. Berikut adalah cara menggunakan perintah barplot: barplot(x$Pasien, names.arg = x$Hari) Selanjutnya kita akan menggunakan paket ggplot2 untuk menyajikan grafik batang yang lebih menarik. Berikut adalah perintah untuk membuat grafik batang dengan menggunakan paket ggplot2: p &lt;- ggplot(x, aes(Hari)) + geom_bar(aes(weight=Pasien, fill=Hari, colour=Hari)) + theme_bw() p penjelasan: ggplot(x, aes(Hari)) adalah perintah untuk membuat sebuah objek ggplot dari variabel Hari pada data x geom_bar(aes(weight=Pasien, fill=Hari, colour=Hari)) geom_bar() adalah perintah untuk membuat grafik batang menggunakan ggplot weight adalah banyak datanya (dalam kasus yang kita kerjakan: banyaknya Pasien setiap hari) fill bertujuan untuk memberi warna batang (harus sama dengan aes(Hari) pada ggplot agar setiap batang memiliki warna yang berbeda) colour bertujuan untuk memberi warna garis (harus sama dengan aes(Hari) pada ggplot agar setiap batang memiliki warna yang berbeda) theme_bw() bertujuan untuk menentukan tema black and white pada grafik 6.2 Histogram Histogram merupakan grafik batang yang dapat menunjukkan seberapa sering suatu nilai yang berbeda terjadi. Histogram lebih sering digunakan untuk melihat distribusi dari suatu data. Berbeda dengan grafik batang, kita perlu menggunakan data numerik dalam membuat sebuah histogram. Berikut adalah data acak yang dibangkitkan dengan perintah rnorm: data &lt;- data.frame(x = rnorm(100,5,2)) Kita dapat menggunakan perintah hist yang telah tersedia pada program R saat melakukan instalasi program R. hist(data$x) Selanjutnya kita akan menggunakan perintah yang tersedia pada paket ggplot2. p &lt;- ggplot(data, aes(x)) + geom_histogram(binwidth = 1, color = &quot;white&quot;, fill= &quot;darkred&quot;) + theme_bw() p penjelasan: ggplot(data, aes(x)) adalah perintah untuk membuat sebuah objek ggplot dari objek x pada data data geom_histogram(binwidth = 1, color = \"white\", fill= \"darkred\") geom_histogram() adalah perintah untuk membuat histogram menggunakan ggplot binwidth adalah lebar dari masing-masing batang fill bertujuan untuk memberi warna batang (dalam kasus ini kita akan berikan warna yang sama untuk semua batang) colour bertujuan untuk memberi warna garis (dalam kasus ini kita akan berikan warna yang sama untuk semua garis) theme_bw() bertujuan untuk menentukan tema black and white pada plot Selanjutnya bandingkan dengan histogram yang memiliki binwidth berbeda. p &lt;- ggplot(data, aes(x)) + geom_histogram(binwidth = 3, color = &quot;white&quot;, fill= &quot;darkred&quot;) + theme_bw() p 6.3 Pie Plot Pie plot atau diagram lingkaran lebih sering digunaan untuk menunjukkan perbandingan antar kategori pada sebuah variabel. Berikut ini adalah data yang akan kita gunakan untuk membuat diagram lingkaran: jumlah &lt;- c(23, 57, 20) label &lt;- c(&quot;Setuju&quot;, &quot;Tidak setuju&quot;, &quot;Tidak tahu&quot;) x &lt;- data.frame(label, jumlah) Menggunakan perintah pie pie(x$jumlah, labels = x$label) Selanjutnya berikut ini adalah perintah untuk membuat diagram lingkaran dengan menggunakan paket ggplot2 p &lt;- ggplot(x, aes(x=&quot;&quot;, y=jumlah, fill=label)) + geom_bar(stat = &quot;identity&quot;) p + coord_polar(&quot;y&quot;, start = 0) penjelasan: ggplot(x, aes(x=\"\", y=jumlah, fill=label)) adalah perintah untuk membuat sebuah objek ggplot dengan data x dengan nilai y adalah jumlah dan label menjadi warna pembeda di setiap nilai pada y geom_bar(stat = \"identity\") geom_bar() adalah perintah untuk membuat grafik batang menggunakan ggplot stat = \"identity\" bertujuan untuk membuat grafik batang dalam bentuk stacked bar chart coord_polar(\"y\", start = 0) bertujuan untuk membentuk stacked pada koordinat polar mengikuti angle = y dan dimulai dari titik nol start = 0 6.4 Box Plot Box Plot dapat menggambarkan sebaran data yang bersifat numerik. Box plot dibuat dengan menggunakan nilai-nilai pada ukuran pemusatan data. Nilai-nilai tersebut ialah 1st quartile, median, 3rd quartile, dan interquartile range. Selanjutnya kita akan menggunakan 3 data berbeda yang bersebar normal untuk menunjukkan keunggulan dalam menggunakan box plot. x &lt;- rnorm(250, 9, 3) y &lt;- rnorm(250, 4, 1) z &lt;- rnorm(250, 11, 6) Menggunakan perintah boxplot boxplot(x, y, z, names = c(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;)) data &lt;- data.frame(label = c(rep(c(&quot;x&quot;,&quot;y&quot;,&quot;z&quot;), each=250)), value = c(x, y, z)) head(data) ## label value ## 1 x 8.119738 ## 2 x 8.626200 ## 3 x 7.777644 ## 4 x 10.830509 ## 5 x 12.094268 ## 6 x 12.441595 Menggunakan paket ggplot2 p &lt;- ggplot(data, aes(x=label, y=value)) + geom_boxplot(outlier.colour = &quot;red&quot;) + theme_bw() p penjelasan: ggplot(data, aes(x=label, y=value)) adalah perintah untuk membuat sebuah objek ggplot dengan nilai value sebagai y dan label menjadi warna pembeda di setiap nilai y menggunaan data data geom_boxplot(outlier.colour = \"red\") geom_boxplot() adalah perintah untuk membuat box plot menggunakan ggplot outlier.colour = \"red\" memberikan warna merah pada garis box plot (optional) Menggunakan paket ggplot2 6.5 Scatter Plot Scatter Plot (diagram pencar) merupakan grafik yang dibuat dengan tujuan untuk memasangkan 2 nilai/variabel. Diagram pencar dapat menggambarkan hubungan dari 2 nilai/variabel tersebut. Apabila titik-titik dalam diagram pencar menuju kearah kanan atas dari kiri bawah, maka terdapat hubungan yang positif dari kedua nilai/variabel begitu pula sebaliknya. Kita akan menggunakan data berikut untuk menunjukkan hubungan yang positi dan negatif dari 2 variabel. n &lt;- 10 r &lt;- 0.75 library(MASS) data_pos &lt;- mvrnorm(n, mu=c(3, 5), Sigma=matrix(c(1, r, r, 1), nrow=2)) x_pos &lt;- data_pos[, 1] y_pos &lt;- data_pos[, 2] data_neg &lt;- mvrnorm(n, mu=c(3, 5), Sigma=matrix(c(1, -r, -r, 1), nrow=2)) x_neg &lt;- data_neg[, 1] y_neg &lt;- data_neg[, 2] Menggunakan perintah plot pada program R: plot(y_pos, x_pos) plot(y_neg, x_neg) Gambar pertama menunjukkan adanya hubungan yang positif pada pariabel y_pos dan x_pos. Sedangkan pada gambar kedua adalah sebaliknya, yaitu hubungan yang negatif. selanjutnya kita akan membangun diagram pencar menggunakan paket ggplot2. data_pos &lt;- data.frame(data_pos) colnames(data_pos) = c(&quot;x&quot;,&quot;y&quot;) p &lt;- ggplot(data_pos, aes(x,y)) p + geom_point(size=2) + geom_smooth(method=lm) + theme_bw() ## `geom_smooth()` using formula &#39;y ~ x&#39; penjelasan: data_pos adalah objek yang memuat data_pos baru setelah diubah kedalam bentuk data frame colnames() adalah perintah untuk memberikan nama kolom/variabel pada data frame ggplot(data_pos, aes(x,y)) adalah perintah untuk membuat sebuah objek ggplot dengan nilai value sebagai y dan label menjadi warna pembeda di setiap nilai y menggunaan data data geom_point() adalah perintah untuk membuat diagram pencar size=2 adalah perintah untuk mengubah ukuran titik diagram pencar menjadi sebesar 2 poin geom_smooth(method=lm) adalah perintah untuk membuat garis regresi linier sebagai penegas hubungan antara 2 variabel (optional) 6.6 Line Plot x &lt;- c(23, 57, 20) names(x) &lt;- c(&quot;Setuju&quot;, &quot;Tidak setuju&quot;, &quot;Tidak tahu&quot;) Menggunakan perintah pie plot(x, type = &quot;o&quot;) 6.7 Area Plot data(&quot;diamonds&quot;) head(diamonds) ## # A tibble: 6 Ã— 10 ## carat cut color clarity depth table price ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 ## 2 0.21 Premium E SI1 59.8 61 326 ## 3 0.23 Good E VS1 56.9 65 327 ## 4 0.29 Premium I VS2 62.4 58 334 ## 5 0.31 Good J SI2 63.3 58 335 ## 6 0.24 Very Gâ€¦ J VVS2 62.8 57 336 ## # â€¦ with 3 more variables: x &lt;dbl&gt;, y &lt;dbl&gt;, ## # z &lt;dbl&gt; ## # â„¹ Use `colnames()` to see all variable names Note: data diamonds adalah data yang sudah tersedia dalam program R Menggunakan paket ggplot2 p &lt;- ggplot(diamonds, aes(x = price, fill = cut)) p + geom_area(stat = &quot;bin&quot;) ## `stat_bin()` using `bins = 30`. Pick better ## value with `binwidth`. "],["references.html", "References", " References "]]
